
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000083c  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000080  0000083c  0000083c  00000890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  000008bc  000008bc  00000910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  000008d4  000008d4  00000928  2**2
                  ALLOC
  4 .debug_frame  000002f8  00000000  00000000  00000928  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001800  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000999  00000000  00000000  00002420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00000521  00000000  00000000  00002db9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000000c0  00000000  00000000  000032da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  0000339a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000080b  00000000  00000000  000033c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005ca  00000000  00000000  00003bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00004197  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 33 	calli e0 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_scall_handler>:
  c0:	34 00 00 00 	nop
  c4:	34 00 00 00 	nop
  c8:	34 00 00 00 	nop
  cc:	34 00 00 00 	nop
  d0:	34 00 00 00 	nop
  d4:	34 00 00 00 	nop
  d8:	34 00 00 00 	nop
  dc:	34 00 00 00 	nop

000000e0 <_crt0>:
  e0:	78 1c 00 00 	mvhi sp,0x0
  e4:	3b 9c 0f fc 	ori sp,sp,0xffc
  e8:	78 1a 00 00 	mvhi gp,0x0
  ec:	3b 5a 08 e0 	ori gp,gp,0x8e0
  f0:	78 01 00 00 	mvhi r1,0x0
  f4:	38 21 08 d4 	ori r1,r1,0x8d4
  f8:	78 03 00 00 	mvhi r3,0x0
  fc:	38 63 09 58 	ori r3,r3,0x958

00000100 <.clearBSS>:
 100:	44 23 00 04 	be r1,r3,110 <.callMain>
 104:	58 20 00 00 	sw (r1+0),r0
 108:	34 21 00 04 	addi r1,r1,4
 10c:	e3 ff ff fd 	bi 100 <.clearBSS>

00000110 <.callMain>:
 110:	34 01 00 00 	mvi r1,0
 114:	34 02 00 00 	mvi r2,0
 118:	34 03 00 00 	mvi r3,0
 11c:	f8 00 00 33 	calli 1e8 <main>

00000120 <irq_enable>:
 120:	34 01 00 01 	mvi r1,1
 124:	d0 01 00 00 	wcsr IE,r1
 128:	c3 a0 00 00 	ret

0000012c <irq_disable>:
 12c:	34 01 00 00 	mvi r1,0
 130:	d0 01 00 00 	wcsr IE,r1
 134:	c3 a0 00 00 	ret

00000138 <irq_set_mask>:
 138:	d0 21 00 00 	wcsr IM,r1
 13c:	c3 a0 00 00 	ret

00000140 <irq_get_mask>:
 140:	90 20 08 00 	rcsr r1,IM
 144:	c3 a0 00 00 	ret

00000148 <jump>:
 148:	c0 20 00 00 	b r1

0000014c <halt>:
 14c:	e0 00 00 00 	bi 14c <halt>

00000150 <_save_all>:
 150:	37 9c ff 80 	addi sp,sp,-128
 154:	5b 81 00 04 	sw (sp+4),r1
 158:	5b 82 00 08 	sw (sp+8),r2
 15c:	5b 83 00 0c 	sw (sp+12),r3
 160:	5b 84 00 10 	sw (sp+16),r4
 164:	5b 85 00 14 	sw (sp+20),r5
 168:	5b 86 00 18 	sw (sp+24),r6
 16c:	5b 87 00 1c 	sw (sp+28),r7
 170:	5b 88 00 20 	sw (sp+32),r8
 174:	5b 89 00 24 	sw (sp+36),r9
 178:	5b 8a 00 28 	sw (sp+40),r10
 17c:	5b 9e 00 78 	sw (sp+120),ea
 180:	5b 9f 00 7c 	sw (sp+124),ba
 184:	2b 81 00 80 	lw r1,(sp+128)
 188:	5b 81 00 74 	sw (sp+116),r1
 18c:	bb 80 08 00 	mv r1,sp
 190:	34 21 00 80 	addi r1,r1,128
 194:	5b 81 00 70 	sw (sp+112),r1
 198:	c3 a0 00 00 	ret

0000019c <_restore_all_and_eret>:
 19c:	2b 81 00 04 	lw r1,(sp+4)
 1a0:	2b 82 00 08 	lw r2,(sp+8)
 1a4:	2b 83 00 0c 	lw r3,(sp+12)
 1a8:	2b 84 00 10 	lw r4,(sp+16)
 1ac:	2b 85 00 14 	lw r5,(sp+20)
 1b0:	2b 86 00 18 	lw r6,(sp+24)
 1b4:	2b 87 00 1c 	lw r7,(sp+28)
 1b8:	2b 88 00 20 	lw r8,(sp+32)
 1bc:	2b 89 00 24 	lw r9,(sp+36)
 1c0:	2b 8a 00 28 	lw r10,(sp+40)
 1c4:	2b 9d 00 74 	lw ra,(sp+116)
 1c8:	2b 9e 00 78 	lw ea,(sp+120)
 1cc:	2b 9f 00 7c 	lw ba,(sp+124)
 1d0:	2b 9c 00 70 	lw sp,(sp+112)
 1d4:	c3 c0 00 00 	eret

000001d8 <get_sp>:
 1d8:	bb 80 08 00 	mv r1,sp
 1dc:	c3 a0 00 00 	ret

000001e0 <get_gp>:
 1e0:	bb 40 08 00 	mv r1,gp
 1e4:	c3 a0 00 00 	ret

000001e8 <main>:
#include "uart.h"
#include "camera.h"


int main()
{	
 1e8:	37 9c ff e4 	addi sp,sp,-28
 1ec:	5b 8b 00 0c 	sw (sp+12),r11
 1f0:	5b 8c 00 08 	sw (sp+8),r12
 1f4:	5b 9d 00 04 	sw (sp+4),ra
   while(1)
   {
	
		com=comando.uart_getchar();	
		comando.uart_putchar(com);
		if(com==0xF0)
 1f8:	34 0c 00 f0 	mvi r12,240
 1fc:	e0 00 00 13 	bi 248 <main+0x60>
			foto.tomar(0);		
			foto.tomar(1);
		}
		if(com=0XF1)
		{		
		dato=foto.leer(1);
 200:	34 02 00 01 	mvi r2,1
 204:	37 81 00 18 	addi r1,sp,24
 208:	f8 00 01 86 	calli 820 <_ZN6camera4leerEi>
		comando.uart_putchar(dato);
 20c:	20 22 00 ff 	andi r2,r1,0xff
 210:	37 81 00 10 	addi r1,sp,16
 214:	f8 00 01 5b 	calli 780 <_ZN4uart12uart_putcharEc>
		comando.uart_putchar(0XBB);
 218:	37 81 00 10 	addi r1,sp,16
 21c:	34 02 00 bb 	mvi r2,187
 220:	f8 00 01 58 	calli 780 <_ZN4uart12uart_putcharEc>
		}
		if(com=0XF2)
		{	
		dato=foto.leer(0);
 224:	34 02 00 00 	mvi r2,0
 228:	37 81 00 18 	addi r1,sp,24
 22c:	f8 00 01 7d 	calli 820 <_ZN6camera4leerEi>
		comando.uart_putchar(dato);
 230:	20 22 00 ff 	andi r2,r1,0xff
 234:	37 81 00 10 	addi r1,sp,16
 238:	f8 00 01 52 	calli 780 <_ZN4uart12uart_putcharEc>
		comando.uart_putchar(0XCC);		
 23c:	34 02 00 cc 	mvi r2,204
 240:	37 81 00 10 	addi r1,sp,16
 244:	f8 00 01 4f 	calli 780 <_ZN4uart12uart_putcharEc>
		com=comando.uart_getchar();	
 248:	37 81 00 10 	addi r1,sp,16
 24c:	f8 00 01 43 	calli 758 <_ZN4uart12uart_getcharEv>
 250:	b8 20 58 00 	mv r11,r1
		comando.uart_putchar(com);
 254:	b8 20 10 00 	mv r2,r1
 258:	37 81 00 10 	addi r1,sp,16
 25c:	f8 00 01 49 	calli 780 <_ZN4uart12uart_putcharEc>
		if(com==0xF0)
 260:	5d 6c ff e8 	bne r11,r12,200 <main+0x18>
		comando.uart_putchar(0xAA);
 264:	37 81 00 10 	addi r1,sp,16
 268:	34 02 00 aa 	mvi r2,170
 26c:	f8 00 01 45 	calli 780 <_ZN4uart12uart_putcharEc>
			foto.tomar(0);		
 270:	37 81 00 18 	addi r1,sp,24
 274:	34 02 00 00 	mvi r2,0
 278:	f8 00 01 63 	calli 804 <_ZN6camera5tomarEi>
			foto.tomar(1);
 27c:	37 81 00 18 	addi r1,sp,24
 280:	34 02 00 01 	mvi r2,1
 284:	f8 00 01 60 	calli 804 <_ZN6camera5tomarEi>
 288:	e3 ff ff de 	bi 200 <main+0x18>

0000028c <_Z7tic_isrv>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 28c:	78 01 00 00 	mvhi r1,0x0
 290:	38 21 08 3c 	ori r1,r1,0x83c
 294:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 298:	78 04 00 00 	mvhi r4,0x0
 29c:	38 84 08 40 	ori r4,r4,0x840
 2a0:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
 2a4:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2a8:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
 2ac:	34 21 00 01 	addi r1,r1,1
 2b0:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2b4:	34 01 00 0e 	mvi r1,14
 2b8:	58 61 00 00 	sw (r3+0),r1
}
 2bc:	c3 a0 00 00 	ret

000002c0 <_Z8isr_nullv>:
 2c0:	c3 a0 00 00 	ret

000002c4 <_Z8pwm_readv>:
	return pwm -> d_out;
 2c4:	78 02 00 00 	mvhi r2,0x0
 2c8:	38 42 08 44 	ori r2,r2,0x844
 2cc:	28 41 00 00 	lw r1,(r2+0)
 2d0:	28 21 00 00 	lw r1,(r1+0)
 2d4:	28 21 00 00 	lw r1,(r1+0)
}
 2d8:	c3 a0 00 00 	ret

000002dc <_Z6pwm_rdh>:
pwm -> rd = vrd;
 2dc:	78 03 00 00 	mvhi r3,0x0
 2e0:	38 63 08 48 	ori r3,r3,0x848
 2e4:	28 62 00 00 	lw r2,(r3+0)
void pwm_rd(uint8_t vrd){
 2e8:	20 21 00 ff 	andi r1,r1,0xff
pwm -> rd = vrd;
 2ec:	28 42 00 00 	lw r2,(r2+0)
 2f0:	30 41 00 04 	sb (r2+4),r1
}
 2f4:	c3 a0 00 00 	ret

000002f8 <_Z8pwm_addrj>:
pwm -> addr = vaddr;
 2f8:	78 03 00 00 	mvhi r3,0x0
 2fc:	38 63 08 4c 	ori r3,r3,0x84c
 300:	28 62 00 00 	lw r2,(r3+0)
 304:	28 42 00 00 	lw r2,(r2+0)
 308:	58 41 00 08 	sw (r2+8),r1
}
 30c:	c3 a0 00 00 	ret

00000310 <_Z6pwm_wrh>:
pwm -> wr = vwr;
 310:	78 03 00 00 	mvhi r3,0x0
 314:	38 63 08 50 	ori r3,r3,0x850
 318:	28 62 00 00 	lw r2,(r3+0)
void pwm_wr(uint8_t vwr){
 31c:	20 21 00 ff 	andi r1,r1,0xff
pwm -> wr = vwr;
 320:	28 42 00 00 	lw r2,(r2+0)
 324:	30 41 00 0c 	sb (r2+12),r1
}
 328:	c3 a0 00 00 	ret

0000032c <_Z7pwm_dinj>:
pwm -> d_in = vd_in;
 32c:	78 03 00 00 	mvhi r3,0x0
 330:	38 63 08 54 	ori r3,r3,0x854
 334:	28 62 00 00 	lw r2,(r3+0)
 338:	28 42 00 00 	lw r2,(r2+0)
 33c:	58 41 00 10 	sw (r2+16),r1
}
 340:	c3 a0 00 00 	ret

00000344 <_Z9tomarfotoi>:
camera0->resetwr=1;
 344:	78 03 00 00 	mvhi r3,0x0
 348:	38 63 08 58 	ori r3,r3,0x858
 34c:	28 62 00 00 	lw r2,(r3+0)
 350:	34 03 00 01 	mvi r3,1
camera0->takepicture=a;
 354:	20 21 00 ff 	andi r1,r1,0xff
camera0->resetwr=1;
 358:	28 42 00 00 	lw r2,(r2+0)
 35c:	30 43 00 06 	sb (r2+6),r3
camera0->takepicture=a;
 360:	30 41 00 04 	sb (r2+4),r1
}
 364:	c3 a0 00 00 	ret

00000368 <_Z8leerfotoi>:
camera0->leer=b;
 368:	78 03 00 00 	mvhi r3,0x0
 36c:	38 63 08 5c 	ori r3,r3,0x85c
 370:	28 62 00 00 	lw r2,(r3+0)
 374:	20 21 00 ff 	andi r1,r1,0xff
 378:	28 42 00 00 	lw r2,(r2+0)
 37c:	30 41 00 05 	sb (r2+5),r1
camera0->resetrd=1;
 380:	34 01 00 01 	mvi r1,1
 384:	30 41 00 07 	sb (r2+7),r1
return camera0->dout;
 388:	28 41 00 00 	lw r1,(r2+0)
}
 38c:	c3 a0 00 00 	ret

00000390 <_Z15gpio_config_dirj>:
	gpio0 -> dir = vdir;
 390:	78 03 00 00 	mvhi r3,0x0
 394:	38 63 08 60 	ori r3,r3,0x860
 398:	28 62 00 00 	lw r2,(r3+0)
 39c:	28 42 00 00 	lw r2,(r2+0)
 3a0:	58 41 00 08 	sw (r2+8),r1
}
 3a4:	c3 a0 00 00 	ret

000003a8 <_Z10gpio_writej>:
	gpio0 -> wr = vpins;
 3a8:	78 03 00 00 	mvhi r3,0x0
 3ac:	38 63 08 64 	ori r3,r3,0x864
 3b0:	28 62 00 00 	lw r2,(r3+0)
 3b4:	28 42 00 00 	lw r2,(r2+0)
 3b8:	58 41 00 04 	sw (r2+4),r1
}
 3bc:	c3 a0 00 00 	ret

000003c0 <_Z9gpio_readv>:
	return gpio0 -> rd;
 3c0:	78 02 00 00 	mvhi r2,0x0
 3c4:	38 42 08 68 	ori r2,r2,0x868
 3c8:	28 41 00 00 	lw r1,(r2+0)
 3cc:	28 21 00 00 	lw r1,(r1+0)
 3d0:	28 21 00 00 	lw r1,(r1+0)
}
 3d4:	c3 a0 00 00 	ret

000003d8 <_Z11irq_handlerj>:
{
 3d8:	37 9c ff f0 	addi sp,sp,-16
 3dc:	5b 8b 00 10 	sw (sp+16),r11
 3e0:	5b 8c 00 0c 	sw (sp+12),r12
 3e4:	5b 8d 00 08 	sw (sp+8),r13
 3e8:	5b 9d 00 04 	sw (sp+4),ra
 3ec:	78 02 00 00 	mvhi r2,0x0
 3f0:	38 42 08 6c 	ori r2,r2,0x86c
 3f4:	28 4b 00 00 	lw r11,(r2+0)
 3f8:	b8 20 60 00 	mv r12,r1
 3fc:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 400:	21 81 00 01 	andi r1,r12,0x1
 404:	44 20 00 03 	be r1,r0,410 <_Z11irq_handlerj+0x38>
 408:	29 61 00 00 	lw r1,(r11+0)
 40c:	d8 20 00 00 	call r1
 410:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
 414:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 418:	5d ab ff fa 	bne r13,r11,400 <_Z11irq_handlerj+0x28>
}
 41c:	2b 9d 00 04 	lw ra,(sp+4)
 420:	2b 8b 00 10 	lw r11,(sp+16)
 424:	2b 8c 00 0c 	lw r12,(sp+12)
 428:	2b 8d 00 08 	lw r13,(sp+8)
 42c:	37 9c 00 10 	addi sp,sp,16
 430:	c3 a0 00 00 	ret

00000434 <_Z8isr_initv>:
{
 434:	78 02 00 00 	mvhi r2,0x0
 438:	38 42 08 70 	ori r2,r2,0x870
 43c:	28 41 00 00 	lw r1,(r2+0)
 440:	78 02 00 00 	mvhi r2,0x0
 444:	38 42 08 74 	ori r2,r2,0x874
 448:	28 43 00 00 	lw r3,(r2+0)
 44c:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 450:	58 23 00 00 	sw (r1+0),r3
 454:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
 458:	5c 22 ff fe 	bne r1,r2,450 <_Z8isr_initv+0x1c>
}
 45c:	c3 a0 00 00 	ret

00000460 <_Z12isr_registeriPFvvE>:
	isr_table[irq] = isr;
 460:	78 04 00 00 	mvhi r4,0x0
 464:	38 84 08 78 	ori r4,r4,0x878
 468:	3c 23 00 02 	sli r3,r1,2
 46c:	28 81 00 00 	lw r1,(r4+0)
 470:	b4 23 08 00 	add r1,r1,r3
 474:	58 22 00 00 	sw (r1+0),r2
}
 478:	c3 a0 00 00 	ret

0000047c <_Z14isr_unregisteri>:
	isr_table[irq] = &isr_null;
 47c:	78 03 00 00 	mvhi r3,0x0
 480:	38 63 08 7c 	ori r3,r3,0x87c
 484:	3c 22 00 02 	sli r2,r1,2
 488:	28 61 00 00 	lw r1,(r3+0)
 48c:	78 03 00 00 	mvhi r3,0x0
 490:	38 63 08 80 	ori r3,r3,0x880
 494:	b4 22 08 00 	add r1,r1,r2
 498:	28 62 00 00 	lw r2,(r3+0)
 49c:	58 22 00 00 	sw (r1+0),r2
}
 4a0:	c3 a0 00 00 	ret

000004a4 <_Z6msleepj>:
	timer0->compare1 = (FCPU/1000)*msec;
 4a4:	78 03 00 00 	mvhi r3,0x0
 4a8:	38 02 c3 50 	mvu r2,0xc350
 4ac:	38 63 08 84 	ori r3,r3,0x884
 4b0:	88 22 08 00 	mul r1,r1,r2
 4b4:	28 62 00 00 	lw r2,(r3+0)
 4b8:	28 42 00 00 	lw r2,(r2+0)
 4bc:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 4c0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 4c4:	34 01 00 08 	mvi r1,8
 4c8:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 4cc:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 4d0:	20 21 00 01 	andi r1,r1,0x1
 4d4:	44 20 ff fe 	be r1,r0,4cc <_Z6msleepj+0x28>
}
 4d8:	c3 a0 00 00 	ret

000004dc <_Z6nsleepj>:
	timer0->compare1 = (FCPU/1000000)*nsec;
 4dc:	78 03 00 00 	mvhi r3,0x0
 4e0:	38 63 08 88 	ori r3,r3,0x888
 4e4:	28 62 00 00 	lw r2,(r3+0)
 4e8:	08 21 00 32 	muli r1,r1,50
 4ec:	28 42 00 00 	lw r2,(r2+0)
 4f0:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 4f4:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 4f8:	34 01 00 08 	mvi r1,8
 4fc:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 500:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 504:	20 21 00 01 	andi r1,r1,0x1
 508:	44 20 ff fe 	be r1,r0,500 <_Z6nsleepj+0x24>
}
 50c:	c3 a0 00 00 	ret

00000510 <_Z8tic_initv>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 510:	78 02 00 00 	mvhi r2,0x0
 514:	38 42 08 8c 	ori r2,r2,0x88c
 518:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
 51c:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
 520:	34 02 13 88 	mvi r2,5000
 524:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
 528:	38 63 08 90 	ori r3,r3,0x890
	timer0->compare0 = (FCPU/10000);
 52c:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
 530:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
 534:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
 538:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
 53c:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 540:	34 02 00 0e 	mvi r2,14
 544:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
 548:	78 02 00 00 	mvhi r2,0x0
 54c:	38 42 08 94 	ori r2,r2,0x894
 550:	38 63 08 98 	ori r3,r3,0x898
 554:	28 41 00 00 	lw r1,(r2+0)
 558:	28 62 00 00 	lw r2,(r3+0)
 55c:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
 560:	c3 a0 00 00 	ret

00000564 <_Z9uart_initv>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 564:	c3 a0 00 00 	ret

00000568 <_Z12uart_getcharv>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 568:	78 02 00 00 	mvhi r2,0x0
 56c:	38 42 08 9c 	ori r2,r2,0x89c
 570:	28 41 00 00 	lw r1,(r2+0)
 574:	28 22 00 00 	lw r2,(r1+0)
 578:	28 41 00 00 	lw r1,(r2+0)
 57c:	20 21 00 01 	andi r1,r1,0x1
 580:	44 20 ff fe 	be r1,r0,578 <_Z12uart_getcharv+0x10>
	return uart0->rxtx;
 584:	28 41 00 04 	lw r1,(r2+4)
}
 588:	20 21 00 ff 	andi r1,r1,0xff
 58c:	c3 a0 00 00 	ret

00000590 <_Z12uart_putcharc>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 590:	78 03 00 00 	mvhi r3,0x0
 594:	38 63 08 a0 	ori r3,r3,0x8a0
 598:	28 62 00 00 	lw r2,(r3+0)
{
 59c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 5a0:	28 43 00 00 	lw r3,(r2+0)
 5a4:	28 62 00 00 	lw r2,(r3+0)
 5a8:	20 42 00 10 	andi r2,r2,0x10
 5ac:	5c 40 ff fe 	bne r2,r0,5a4 <_Z12uart_putcharc+0x14>
	uart0->rxtx = c;
 5b0:	58 61 00 04 	sw (r3+4),r1
}
 5b4:	c3 a0 00 00 	ret

000005b8 <_Z11uart_putstrPc>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 5b8:	40 24 00 00 	lbu r4,(r1+0)
 5bc:	44 80 00 0c 	be r4,r0,5ec <_Z11uart_putstrPc+0x34>
	while (uart0->ucr & UART_BUSY) ;
 5c0:	78 03 00 00 	mvhi r3,0x0
 5c4:	38 63 08 a4 	ori r3,r3,0x8a4
 5c8:	28 62 00 00 	lw r2,(r3+0)
 5cc:	28 43 00 00 	lw r3,(r2+0)
 5d0:	28 62 00 00 	lw r2,(r3+0)
 5d4:	20 42 00 10 	andi r2,r2,0x10
 5d8:	5c 40 ff fe 	bne r2,r0,5d0 <_Z11uart_putstrPc+0x18>
	uart0->rxtx = c;
 5dc:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 5e0:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 5e4:	40 24 00 00 	lbu r4,(r1+0)
 5e8:	5c 80 ff fa 	bne r4,r0,5d0 <_Z11uart_putstrPc+0x18>
	}
}
 5ec:	c3 a0 00 00 	ret

000005f0 <_ZN3pwm7pwm_selEicb>:
#include "pwm.h"
#include "soc-hw.h"

void pwm::pwm_sel(int b, char c, bool en){
 5f0:	37 9c ff e8 	addi sp,sp,-24
 5f4:	5b 8b 00 18 	sw (sp+24),r11
 5f8:	5b 8c 00 14 	sw (sp+20),r12
 5fc:	5b 8d 00 10 	sw (sp+16),r13
 600:	5b 8e 00 0c 	sw (sp+12),r14
 604:	5b 8f 00 08 	sw (sp+8),r15
 608:	5b 9d 00 04 	sw (sp+4),ra
uint8_t Rd=0;
uint8_t Wr=1;
uint32_t dint=1000000;
uint32_t dind;

uint32_t e=b*12;
 60c:	08 4b 00 0c 	muli r11,r2,12
void pwm::pwm_sel(int b, char c, bool en){
 610:	20 63 00 ff 	andi r3,r3,0xff


if(c==0x11){
dind=0x36*1000;
}
if(c==0x12){
 614:	34 01 00 12 	mvi r1,18
void pwm::pwm_sel(int b, char c, bool en){
 618:	20 8f 00 ff 	andi r15,r4,0xff
uint32_t d=e+8;
 61c:	35 6d 00 08 	addi r13,r11,8
uint32_t t=e+4;
 620:	35 6e 00 04 	addi r14,r11,4
if(c==0x12){
 624:	44 61 00 26 	be r3,r1,6bc <_ZN3pwm7pwm_selEicb+0xcc>
dind=0x83*1000;
}
if(c==0x10){
 628:	34 01 00 10 	mvi r1,16
dind=0xda*1000;
 62c:	38 0c 53 90 	mvu r12,0x5390
 630:	79 8c 00 03 	orhi r12,r12,0x3
if(c==0x10){
 634:	5c 61 00 1a 	bne r3,r1,69c <_ZN3pwm7pwm_selEicb+0xac>
e=e+48;
d=e+8;
t=e+4;
}

pwm_wr(Wr); pwm_rd(Rd);
 638:	34 01 00 01 	mvi r1,1
 63c:	fb ff ff 35 	calli 310 <_Z6pwm_wrh>
 640:	34 01 00 00 	mvi r1,0
 644:	fb ff ff 26 	calli 2dc <_Z6pwm_rdh>
pwm_addr(t); pwm_din(dint);
 648:	b9 c0 08 00 	mv r1,r14
 64c:	fb ff ff 2b 	calli 2f8 <_Z8pwm_addrj>
 650:	38 01 42 40 	mvu r1,0x4240
 654:	78 21 00 0f 	orhi r1,r1,0xf
 658:	fb ff ff 35 	calli 32c <_Z7pwm_dinj>

pwm_addr(d); pwm_din(dind);
 65c:	b9 a0 08 00 	mv r1,r13
 660:	fb ff ff 26 	calli 2f8 <_Z8pwm_addrj>
 664:	b9 80 08 00 	mv r1,r12
 668:	fb ff ff 31 	calli 32c <_Z7pwm_dinj>

pwm_addr(e); pwm_din(en);
 66c:	b9 60 08 00 	mv r1,r11
 670:	fb ff ff 22 	calli 2f8 <_Z8pwm_addrj>
 674:	b9 e0 08 00 	mv r1,r15
 678:	fb ff ff 2d 	calli 32c <_Z7pwm_dinj>


};
 67c:	2b 9d 00 04 	lw ra,(sp+4)
 680:	2b 8b 00 18 	lw r11,(sp+24)
 684:	2b 8c 00 14 	lw r12,(sp+20)
 688:	2b 8d 00 10 	lw r13,(sp+16)
 68c:	2b 8e 00 0c 	lw r14,(sp+12)
 690:	2b 8f 00 08 	lw r15,(sp+8)
 694:	37 9c 00 18 	addi sp,sp,24
 698:	c3 a0 00 00 	ret
if(c==0x13){
 69c:	34 01 00 13 	mvi r1,19
 6a0:	5c 61 00 0a 	bne r3,r1,6c8 <_ZN3pwm7pwm_selEicb+0xd8>
d=e+8;
 6a4:	35 6d 00 38 	addi r13,r11,56
t=e+4;
 6a8:	35 6e 00 34 	addi r14,r11,52
dind=180000;
 6ac:	38 0c bf 20 	mvu r12,0xbf20
 6b0:	79 8c 00 02 	orhi r12,r12,0x2
e=e+48;
 6b4:	35 6b 00 30 	addi r11,r11,48
 6b8:	e3 ff ff e0 	bi 638 <_ZN3pwm7pwm_selEicb+0x48>
dind=0x83*1000;
 6bc:	38 0c ff b8 	mvu r12,0xffb8
 6c0:	79 8c 00 01 	orhi r12,r12,0x1
 6c4:	e3 ff ff dd 	bi 638 <_ZN3pwm7pwm_selEicb+0x48>
if(c==0x14){
 6c8:	34 01 00 14 	mvi r1,20
 6cc:	38 0c d2 f0 	mvu r12,0xd2f0
 6d0:	5c 61 ff da 	bne r3,r1,638 <_ZN3pwm7pwm_selEicb+0x48>
d=e+8;
 6d4:	35 6d 00 38 	addi r13,r11,56
t=e+4;
 6d8:	35 6e 00 34 	addi r14,r11,52
dind=100000;
 6dc:	38 0c 86 a0 	mvu r12,0x86a0
 6e0:	79 8c 00 01 	orhi r12,r12,0x1
e=e+48;
 6e4:	35 6b 00 30 	addi r11,r11,48
 6e8:	e3 ff ff d4 	bi 638 <_ZN3pwm7pwm_selEicb+0x48>

000006ec <_ZN3pwm5brazoEc>:

int pwm::brazo(char d){
 6ec:	20 42 00 ff 	andi r2,r2,0xff
int m;
if(d==0x01){m=0;}
if(d==0x02){m=1;}
 6f0:	34 03 00 02 	mvi r3,2
 6f4:	34 01 00 01 	mvi r1,1
 6f8:	44 43 00 04 	be r2,r3,708 <_ZN3pwm5brazoEc+0x1c>
if(d==0x03){m=2;}
 6fc:	34 03 00 03 	mvi r3,3
 700:	34 01 00 02 	mvi r1,2
 704:	5c 43 00 02 	bne r2,r3,70c <_ZN3pwm5brazoEc+0x20>
if(d==0x04){m=3;}
return m;
};
 708:	c3 a0 00 00 	ret
if(d==0x04){m=3;}
 70c:	34 03 00 04 	mvi r3,4
 710:	34 01 00 00 	mvi r1,0
 714:	5c 43 ff fd 	bne r2,r3,708 <_ZN3pwm5brazoEc+0x1c>
 718:	34 01 00 03 	mvi r1,3
};
 71c:	c3 a0 00 00 	ret

00000720 <_ZN5timer6nsleepEi>:
void timer::nsleep(int nsec)
{
	int tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 720:	78 03 00 00 	mvhi r3,0x0
 724:	38 63 08 a8 	ori r3,r3,0x8a8
 728:	28 61 00 00 	lw r1,(r3+0)
 72c:	08 42 00 32 	muli r2,r2,50
 730:	28 23 00 00 	lw r3,(r1+0)
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 734:	34 01 00 08 	mvi r1,8
	timer0->compare1 = (FCPU/1000000)*nsec;
 738:	58 62 00 10 	sw (r3+16),r2
	timer0->counter1 = 0;
 73c:	58 60 00 14 	sw (r3+20),r0
	timer0->tcr1 = TIMER_EN;
 740:	58 61 00 0c 	sw (r3+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 744:	28 61 00 0c 	lw r1,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 748:	20 21 00 01 	andi r1,r1,0x1
 74c:	44 20 ff fe 	be r1,r0,744 <_ZN5timer6nsleepEi+0x24>
};
 750:	c3 a0 00 00 	ret

00000754 <_ZN4uart9uart_initEv>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 754:	c3 a0 00 00 	ret

00000758 <_ZN4uart12uart_getcharEv>:

char uart::uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 758:	78 02 00 00 	mvhi r2,0x0
 75c:	38 42 08 ac 	ori r2,r2,0x8ac
 760:	28 41 00 00 	lw r1,(r2+0)
 764:	28 22 00 00 	lw r2,(r1+0)
 768:	28 41 00 00 	lw r1,(r2+0)
 76c:	20 21 00 01 	andi r1,r1,0x1
 770:	44 20 ff fe 	be r1,r0,768 <_ZN4uart12uart_getcharEv+0x10>
	return uart0->rxtx;
 774:	28 41 00 04 	lw r1,(r2+4)
}
 778:	20 21 00 ff 	andi r1,r1,0xff
 77c:	c3 a0 00 00 	ret

00000780 <_ZN4uart12uart_putcharEc>:

void uart::uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 780:	78 03 00 00 	mvhi r3,0x0
 784:	38 63 08 b0 	ori r3,r3,0x8b0
 788:	28 61 00 00 	lw r1,(r3+0)
{
 78c:	20 42 00 ff 	andi r2,r2,0xff
	while (uart0->ucr & UART_BUSY) ;
 790:	28 23 00 00 	lw r3,(r1+0)
 794:	28 61 00 00 	lw r1,(r3+0)
 798:	20 21 00 10 	andi r1,r1,0x10
 79c:	5c 20 ff fe 	bne r1,r0,794 <_ZN4uart12uart_putcharEc+0x14>
	uart0->rxtx = c;
 7a0:	58 62 00 04 	sw (r3+4),r2
}
 7a4:	c3 a0 00 00 	ret

000007a8 <_ZN4uart11uart_putstrEPc>:

void uart::uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 7a8:	40 44 00 00 	lbu r4,(r2+0)
 7ac:	44 80 00 0c 	be r4,r0,7dc <_ZN4uart11uart_putstrEPc+0x34>
	while (uart0->ucr & UART_BUSY) ;
 7b0:	78 03 00 00 	mvhi r3,0x0
 7b4:	38 63 08 b4 	ori r3,r3,0x8b4
 7b8:	28 61 00 00 	lw r1,(r3+0)
 7bc:	28 23 00 00 	lw r3,(r1+0)
 7c0:	28 61 00 00 	lw r1,(r3+0)
 7c4:	20 21 00 10 	andi r1,r1,0x10
 7c8:	5c 20 ff fe 	bne r1,r0,7c0 <_ZN4uart11uart_putstrEPc+0x18>
	uart0->rxtx = c;
 7cc:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 7d0:	34 42 00 01 	addi r2,r2,1
	while(*c) {
 7d4:	40 44 00 00 	lbu r4,(r2+0)
 7d8:	5c 80 ff fa 	bne r4,r0,7c0 <_ZN4uart11uart_putstrEPc+0x18>
	}
}
 7dc:	c3 a0 00 00 	ret

000007e0 <_ZN4uart11uart_getintEv>:

int uart::uart_getint()
{   
	while (! (uart0->ucr & UART_DR)) ;
 7e0:	78 02 00 00 	mvhi r2,0x0
 7e4:	38 42 08 b8 	ori r2,r2,0x8b8
 7e8:	28 41 00 00 	lw r1,(r2+0)
 7ec:	28 22 00 00 	lw r2,(r1+0)
 7f0:	28 41 00 00 	lw r1,(r2+0)
 7f4:	20 21 00 01 	andi r1,r1,0x1
 7f8:	44 20 ff fe 	be r1,r0,7f0 <_ZN4uart11uart_getintEv+0x10>
	return uart0->rxtx;
 7fc:	28 41 00 04 	lw r1,(r2+4)
}
 800:	c3 a0 00 00 	ret

00000804 <_ZN6camera5tomarEi>:
#include "camera.h"
#include "soc-hw.h"


void camera::tomar(int take)
{
 804:	37 9c ff fc 	addi sp,sp,-4
 808:	5b 9d 00 04 	sw (sp+4),ra
tomarfoto(take);
 80c:	b8 40 08 00 	mv r1,r2
 810:	fb ff fe cd 	calli 344 <_Z9tomarfotoi>
};
 814:	2b 9d 00 04 	lw ra,(sp+4)
 818:	37 9c 00 04 	addi sp,sp,4
 81c:	c3 a0 00 00 	ret

00000820 <_ZN6camera4leerEi>:


char32_t camera::leer(int lee)
{
 820:	37 9c ff fc 	addi sp,sp,-4
 824:	5b 9d 00 04 	sw (sp+4),ra
char32_t c=leerfoto(lee);
 828:	b8 40 08 00 	mv r1,r2
 82c:	fb ff fe cf 	calli 368 <_Z8leerfotoi>
return c;
}; 
 830:	2b 9d 00 04 	lw ra,(sp+4)
 834:	37 9c 00 04 	addi sp,sp,4
 838:	c3 a0 00 00 	ret
