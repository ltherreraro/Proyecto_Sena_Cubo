
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000974  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000094  00000974  00000974  000009c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00000a08  00000a08  00000a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000a20  00000a20  00000a74  2**2
                  ALLOC
  4 .debug_frame  0000037c  00000000  00000000  00000a74  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b3d  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000099b  00000000  00000000  0000292d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000004f4  00000000  00000000  000032c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000000c0  00000000  00000000  000037bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  0000387c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000098c  00000000  00000000  000038a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000685  00000000  00000000  00004230  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  000048b5  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 33 	calli e0 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_scall_handler>:
  c0:	34 00 00 00 	nop
  c4:	34 00 00 00 	nop
  c8:	34 00 00 00 	nop
  cc:	34 00 00 00 	nop
  d0:	34 00 00 00 	nop
  d4:	34 00 00 00 	nop
  d8:	34 00 00 00 	nop
  dc:	34 00 00 00 	nop

000000e0 <_crt0>:
  e0:	78 1c 00 00 	mvhi sp,0x0
  e4:	3b 9c 0f fc 	ori sp,sp,0xffc
  e8:	78 1a 00 00 	mvhi gp,0x0
  ec:	3b 5a 0a 20 	ori gp,gp,0xa20
  f0:	78 01 00 00 	mvhi r1,0x0
  f4:	38 21 0a 20 	ori r1,r1,0xa20
  f8:	78 03 00 00 	mvhi r3,0x0
  fc:	38 63 0a a4 	ori r3,r3,0xaa4

00000100 <.clearBSS>:
 100:	44 23 00 04 	be r1,r3,110 <.callMain>
 104:	58 20 00 00 	sw (r1+0),r0
 108:	34 21 00 04 	addi r1,r1,4
 10c:	e3 ff ff fd 	bi 100 <.clearBSS>

00000110 <.callMain>:
 110:	34 01 00 00 	mvi r1,0
 114:	34 02 00 00 	mvi r2,0
 118:	34 03 00 00 	mvi r3,0
 11c:	f8 00 00 33 	calli 1e8 <main>

00000120 <irq_enable>:
 120:	34 01 00 01 	mvi r1,1
 124:	d0 01 00 00 	wcsr IE,r1
 128:	c3 a0 00 00 	ret

0000012c <irq_disable>:
 12c:	34 01 00 00 	mvi r1,0
 130:	d0 01 00 00 	wcsr IE,r1
 134:	c3 a0 00 00 	ret

00000138 <irq_set_mask>:
 138:	d0 21 00 00 	wcsr IM,r1
 13c:	c3 a0 00 00 	ret

00000140 <irq_get_mask>:
 140:	90 20 08 00 	rcsr r1,IM
 144:	c3 a0 00 00 	ret

00000148 <jump>:
 148:	c0 20 00 00 	b r1

0000014c <halt>:
 14c:	e0 00 00 00 	bi 14c <halt>

00000150 <_save_all>:
 150:	37 9c ff 80 	addi sp,sp,-128
 154:	5b 81 00 04 	sw (sp+4),r1
 158:	5b 82 00 08 	sw (sp+8),r2
 15c:	5b 83 00 0c 	sw (sp+12),r3
 160:	5b 84 00 10 	sw (sp+16),r4
 164:	5b 85 00 14 	sw (sp+20),r5
 168:	5b 86 00 18 	sw (sp+24),r6
 16c:	5b 87 00 1c 	sw (sp+28),r7
 170:	5b 88 00 20 	sw (sp+32),r8
 174:	5b 89 00 24 	sw (sp+36),r9
 178:	5b 8a 00 28 	sw (sp+40),r10
 17c:	5b 9e 00 78 	sw (sp+120),ea
 180:	5b 9f 00 7c 	sw (sp+124),ba
 184:	2b 81 00 80 	lw r1,(sp+128)
 188:	5b 81 00 74 	sw (sp+116),r1
 18c:	bb 80 08 00 	mv r1,sp
 190:	34 21 00 80 	addi r1,r1,128
 194:	5b 81 00 70 	sw (sp+112),r1
 198:	c3 a0 00 00 	ret

0000019c <_restore_all_and_eret>:
 19c:	2b 81 00 04 	lw r1,(sp+4)
 1a0:	2b 82 00 08 	lw r2,(sp+8)
 1a4:	2b 83 00 0c 	lw r3,(sp+12)
 1a8:	2b 84 00 10 	lw r4,(sp+16)
 1ac:	2b 85 00 14 	lw r5,(sp+20)
 1b0:	2b 86 00 18 	lw r6,(sp+24)
 1b4:	2b 87 00 1c 	lw r7,(sp+28)
 1b8:	2b 88 00 20 	lw r8,(sp+32)
 1bc:	2b 89 00 24 	lw r9,(sp+36)
 1c0:	2b 8a 00 28 	lw r10,(sp+40)
 1c4:	2b 9d 00 74 	lw ra,(sp+116)
 1c8:	2b 9e 00 78 	lw ea,(sp+120)
 1cc:	2b 9f 00 7c 	lw ba,(sp+124)
 1d0:	2b 9c 00 70 	lw sp,(sp+112)
 1d4:	c3 c0 00 00 	eret

000001d8 <get_sp>:
 1d8:	bb 80 08 00 	mv r1,sp
 1dc:	c3 a0 00 00 	ret

000001e0 <get_gp>:
 1e0:	bb 40 08 00 	mv r1,gp
 1e4:	c3 a0 00 00 	ret

000001e8 <main>:
#include "timer.h"
#include "pwm.h"
#include "uart.h"

int main()
{	
 1e8:	37 9c ff d4 	addi sp,sp,-44
 1ec:	5b 8b 00 14 	sw (sp+20),r11
 1f0:	5b 8c 00 10 	sw (sp+16),r12
 1f4:	5b 8d 00 0c 	sw (sp+12),r13
 1f8:	5b 8e 00 08 	sw (sp+8),r14
 1fc:	5b 9d 00 04 	sw (sp+4),ra
	timer tiempo;
	char p;
	while(1)
	{
		p=com.uart_getchar();
		if(p== 0xFD)
 200:	34 0b 00 fd 	mvi r11,253
			com.uart_putchar(0xFD);
			cam.cam_tomar(1);	
		}
		

		if(p== 0xFE)
 204:	34 0c 00 fe 	mvi r12,254
		{
			com.uart_putchar(0xFE);
			cam.cam_tomar(0);	
		}
		
		if(p== 0x0A)
 208:	34 0d 00 0a 	mvi r13,10
			com.uart_putchar(0x0A);
			cam.cam_leer(1);
			cam.cam_dato();	
		}
			
		if(p== 0x0B)
 20c:	34 0e 00 0b 	mvi r14,11
		p=com.uart_getchar();
 210:	37 81 00 18 	addi r1,sp,24
 214:	f8 00 01 92 	calli 85c <_ZN4uart12uart_getcharEv>
		if(p== 0xFD)
 218:	44 2b 00 0f 	be r1,r11,254 <main+0x6c>
		if(p== 0xFE)
 21c:	44 2c 00 1e 	be r1,r12,294 <main+0xac>
		if(p== 0x0A)
 220:	44 2d 00 14 	be r1,r13,270 <main+0x88>
		if(p== 0x0B)
 224:	5c 2e ff fb 	bne r1,r14,210 <main+0x28>
		{
			com.uart_putchar(0x0B);
 228:	37 81 00 18 	addi r1,sp,24
 22c:	34 02 00 0b 	mvi r2,11
 230:	f8 00 01 95 	calli 884 <_ZN4uart12uart_putcharEc>
			cam.cam_leer(0);
 234:	34 02 00 00 	mvi r2,0
 238:	37 81 00 20 	addi r1,sp,32
 23c:	f8 00 01 ba 	calli 924 <_ZN6camera8cam_leerEi>
			cam.cam_dato();	
 240:	37 81 00 20 	addi r1,sp,32
 244:	f8 00 01 b9 	calli 928 <_ZN6camera8cam_datoEv>
		p=com.uart_getchar();
 248:	37 81 00 18 	addi r1,sp,24
 24c:	f8 00 01 84 	calli 85c <_ZN4uart12uart_getcharEv>
		if(p== 0xFD)
 250:	5c 2b ff f3 	bne r1,r11,21c <main+0x34>
			com.uart_putchar(0xFD);
 254:	37 81 00 18 	addi r1,sp,24
 258:	34 02 00 fd 	mvi r2,253
 25c:	f8 00 01 8a 	calli 884 <_ZN4uart12uart_putcharEc>
			cam.cam_tomar(1);	
 260:	34 02 00 01 	mvi r2,1
 264:	37 81 00 20 	addi r1,sp,32
 268:	f8 00 01 a8 	calli 908 <_ZN6camera9cam_tomarEi>
 26c:	e3 ff ff e9 	bi 210 <main+0x28>
			com.uart_putchar(0x0A);
 270:	37 81 00 18 	addi r1,sp,24
 274:	34 02 00 0a 	mvi r2,10
 278:	f8 00 01 83 	calli 884 <_ZN4uart12uart_putcharEc>
			cam.cam_leer(1);
 27c:	37 81 00 20 	addi r1,sp,32
 280:	34 02 00 01 	mvi r2,1
 284:	f8 00 01 a8 	calli 924 <_ZN6camera8cam_leerEi>
			cam.cam_dato();	
 288:	37 81 00 20 	addi r1,sp,32
 28c:	f8 00 01 a7 	calli 928 <_ZN6camera8cam_datoEv>
 290:	e3 ff ff e0 	bi 210 <main+0x28>
			com.uart_putchar(0xFE);
 294:	37 81 00 18 	addi r1,sp,24
 298:	34 02 00 fe 	mvi r2,254
 29c:	f8 00 01 7a 	calli 884 <_ZN4uart12uart_putcharEc>
			cam.cam_tomar(0);	
 2a0:	34 02 00 00 	mvi r2,0
 2a4:	37 81 00 20 	addi r1,sp,32
 2a8:	f8 00 01 98 	calli 908 <_ZN6camera9cam_tomarEi>
 2ac:	e3 ff ff d9 	bi 210 <main+0x28>

000002b0 <_Z7tic_isrv>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 2b0:	78 01 00 00 	mvhi r1,0x0
 2b4:	38 21 09 74 	ori r1,r1,0x974
 2b8:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2bc:	78 04 00 00 	mvhi r4,0x0
 2c0:	38 84 09 78 	ori r4,r4,0x978
 2c4:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
 2c8:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2cc:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
 2d0:	34 21 00 01 	addi r1,r1,1
 2d4:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2d8:	34 01 00 0e 	mvi r1,14
 2dc:	58 61 00 00 	sw (r3+0),r1
}
 2e0:	c3 a0 00 00 	ret

000002e4 <_Z8isr_nullv>:
 2e4:	c3 a0 00 00 	ret

000002e8 <_Z8cam_readv>:
	return cam -> d_out;
 2e8:	78 02 00 00 	mvhi r2,0x0
 2ec:	38 42 09 7c 	ori r2,r2,0x97c
 2f0:	28 41 00 00 	lw r1,(r2+0)
 2f4:	28 21 00 00 	lw r1,(r1+0)
 2f8:	28 21 00 00 	lw r1,(r1+0)
}
 2fc:	c3 a0 00 00 	ret

00000300 <_Z15cam_takepictureh>:
cam -> takepicture  = vtakepicture;
 300:	78 03 00 00 	mvhi r3,0x0
 304:	38 63 09 80 	ori r3,r3,0x980
 308:	28 62 00 00 	lw r2,(r3+0)
void cam_takepicture (uint8_t vtakepicture ){
 30c:	20 21 00 ff 	andi r1,r1,0xff
cam -> takepicture  = vtakepicture;
 310:	28 42 00 00 	lw r2,(r2+0)
 314:	30 41 00 04 	sb (r2+4),r1
}
 318:	c3 a0 00 00 	ret

0000031c <_Z8cam_leerj>:
cam -> leer = vleer;
 31c:	78 03 00 00 	mvhi r3,0x0
 320:	38 63 09 84 	ori r3,r3,0x984
 324:	28 62 00 00 	lw r2,(r3+0)
 328:	28 42 00 00 	lw r2,(r2+0)
 32c:	58 41 00 08 	sw (r2+8),r1
}
 330:	c3 a0 00 00 	ret

00000334 <_Z11cam_resetwrh>:
cam -> resetwr   = vresetwr;
 334:	78 03 00 00 	mvhi r3,0x0
 338:	38 63 09 88 	ori r3,r3,0x988
 33c:	28 62 00 00 	lw r2,(r3+0)
void cam_resetwr  (uint8_t vresetwr){
 340:	20 21 00 ff 	andi r1,r1,0xff
cam -> resetwr   = vresetwr;
 344:	28 42 00 00 	lw r2,(r2+0)
 348:	30 41 00 0c 	sb (r2+12),r1
}
 34c:	c3 a0 00 00 	ret

00000350 <_Z11cam_resetrdj>:
cam -> resetrd = vresetrd;
 350:	78 03 00 00 	mvhi r3,0x0
 354:	38 63 09 8c 	ori r3,r3,0x98c
 358:	28 62 00 00 	lw r2,(r3+0)
 35c:	28 42 00 00 	lw r2,(r2+0)
 360:	58 41 00 10 	sw (r2+16),r1
}
 364:	c3 a0 00 00 	ret

00000368 <_Z8pwm_readv>:
	return pwm -> d_out;
 368:	78 02 00 00 	mvhi r2,0x0
 36c:	38 42 09 90 	ori r2,r2,0x990
 370:	28 41 00 00 	lw r1,(r2+0)
 374:	28 21 00 00 	lw r1,(r1+0)
 378:	28 21 00 00 	lw r1,(r1+0)
}
 37c:	c3 a0 00 00 	ret

00000380 <_Z6pwm_rdh>:
pwm -> rd = vrd;
 380:	78 03 00 00 	mvhi r3,0x0
 384:	38 63 09 94 	ori r3,r3,0x994
 388:	28 62 00 00 	lw r2,(r3+0)
void pwm_rd(uint8_t vrd){
 38c:	20 21 00 ff 	andi r1,r1,0xff
pwm -> rd = vrd;
 390:	28 42 00 00 	lw r2,(r2+0)
 394:	30 41 00 04 	sb (r2+4),r1
}
 398:	c3 a0 00 00 	ret

0000039c <_Z8pwm_addrj>:
pwm -> addr = vaddr;
 39c:	78 03 00 00 	mvhi r3,0x0
 3a0:	38 63 09 98 	ori r3,r3,0x998
 3a4:	28 62 00 00 	lw r2,(r3+0)
 3a8:	28 42 00 00 	lw r2,(r2+0)
 3ac:	58 41 00 08 	sw (r2+8),r1
}
 3b0:	c3 a0 00 00 	ret

000003b4 <_Z6pwm_wrh>:
pwm -> wr = vwr;
 3b4:	78 03 00 00 	mvhi r3,0x0
 3b8:	38 63 09 9c 	ori r3,r3,0x99c
 3bc:	28 62 00 00 	lw r2,(r3+0)
void pwm_wr(uint8_t vwr){
 3c0:	20 21 00 ff 	andi r1,r1,0xff
pwm -> wr = vwr;
 3c4:	28 42 00 00 	lw r2,(r2+0)
 3c8:	30 41 00 0c 	sb (r2+12),r1
}
 3cc:	c3 a0 00 00 	ret

000003d0 <_Z7pwm_dinj>:
pwm -> d_in = vd_in;
 3d0:	78 03 00 00 	mvhi r3,0x0
 3d4:	38 63 09 a0 	ori r3,r3,0x9a0
 3d8:	28 62 00 00 	lw r2,(r3+0)
 3dc:	28 42 00 00 	lw r2,(r2+0)
 3e0:	58 41 00 10 	sw (r2+16),r1
}
 3e4:	c3 a0 00 00 	ret

000003e8 <_Z15gpio_config_dirj>:
	gpio0 -> dir = vdir;
 3e8:	78 03 00 00 	mvhi r3,0x0
 3ec:	38 63 09 a4 	ori r3,r3,0x9a4
 3f0:	28 62 00 00 	lw r2,(r3+0)
 3f4:	28 42 00 00 	lw r2,(r2+0)
 3f8:	58 41 00 08 	sw (r2+8),r1
}
 3fc:	c3 a0 00 00 	ret

00000400 <_Z10gpio_writej>:
	gpio0 -> wr = vpins;
 400:	78 03 00 00 	mvhi r3,0x0
 404:	38 63 09 a8 	ori r3,r3,0x9a8
 408:	28 62 00 00 	lw r2,(r3+0)
 40c:	28 42 00 00 	lw r2,(r2+0)
 410:	58 41 00 04 	sw (r2+4),r1
}
 414:	c3 a0 00 00 	ret

00000418 <_Z9gpio_readv>:
	return gpio0 -> rd;
 418:	78 02 00 00 	mvhi r2,0x0
 41c:	38 42 09 ac 	ori r2,r2,0x9ac
 420:	28 41 00 00 	lw r1,(r2+0)
 424:	28 21 00 00 	lw r1,(r1+0)
 428:	28 21 00 00 	lw r1,(r1+0)
}
 42c:	c3 a0 00 00 	ret

00000430 <_Z11irq_handlerj>:
{
 430:	37 9c ff f0 	addi sp,sp,-16
 434:	5b 8b 00 10 	sw (sp+16),r11
 438:	5b 8c 00 0c 	sw (sp+12),r12
 43c:	5b 8d 00 08 	sw (sp+8),r13
 440:	5b 9d 00 04 	sw (sp+4),ra
 444:	78 02 00 00 	mvhi r2,0x0
 448:	38 42 09 b0 	ori r2,r2,0x9b0
 44c:	28 4b 00 00 	lw r11,(r2+0)
 450:	b8 20 60 00 	mv r12,r1
 454:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 458:	21 81 00 01 	andi r1,r12,0x1
 45c:	44 20 00 03 	be r1,r0,468 <_Z11irq_handlerj+0x38>
 460:	29 61 00 00 	lw r1,(r11+0)
 464:	d8 20 00 00 	call r1
 468:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
 46c:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 470:	5d ab ff fa 	bne r13,r11,458 <_Z11irq_handlerj+0x28>
}
 474:	2b 9d 00 04 	lw ra,(sp+4)
 478:	2b 8b 00 10 	lw r11,(sp+16)
 47c:	2b 8c 00 0c 	lw r12,(sp+12)
 480:	2b 8d 00 08 	lw r13,(sp+8)
 484:	37 9c 00 10 	addi sp,sp,16
 488:	c3 a0 00 00 	ret

0000048c <_Z8isr_initv>:
{
 48c:	78 02 00 00 	mvhi r2,0x0
 490:	38 42 09 b4 	ori r2,r2,0x9b4
 494:	28 41 00 00 	lw r1,(r2+0)
 498:	78 02 00 00 	mvhi r2,0x0
 49c:	38 42 09 b8 	ori r2,r2,0x9b8
 4a0:	28 43 00 00 	lw r3,(r2+0)
 4a4:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 4a8:	58 23 00 00 	sw (r1+0),r3
 4ac:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
 4b0:	5c 22 ff fe 	bne r1,r2,4a8 <_Z8isr_initv+0x1c>
}
 4b4:	c3 a0 00 00 	ret

000004b8 <_Z12isr_registeriPFvvE>:
	isr_table[irq] = isr;
 4b8:	78 04 00 00 	mvhi r4,0x0
 4bc:	38 84 09 bc 	ori r4,r4,0x9bc
 4c0:	3c 23 00 02 	sli r3,r1,2
 4c4:	28 81 00 00 	lw r1,(r4+0)
 4c8:	b4 23 08 00 	add r1,r1,r3
 4cc:	58 22 00 00 	sw (r1+0),r2
}
 4d0:	c3 a0 00 00 	ret

000004d4 <_Z14isr_unregisteri>:
	isr_table[irq] = &isr_null;
 4d4:	78 03 00 00 	mvhi r3,0x0
 4d8:	38 63 09 c0 	ori r3,r3,0x9c0
 4dc:	3c 22 00 02 	sli r2,r1,2
 4e0:	28 61 00 00 	lw r1,(r3+0)
 4e4:	78 03 00 00 	mvhi r3,0x0
 4e8:	38 63 09 c4 	ori r3,r3,0x9c4
 4ec:	b4 22 08 00 	add r1,r1,r2
 4f0:	28 62 00 00 	lw r2,(r3+0)
 4f4:	58 22 00 00 	sw (r1+0),r2
}
 4f8:	c3 a0 00 00 	ret

000004fc <_Z6msleepj>:
	timer0->compare1 = (FCPU/1000)*msec;
 4fc:	78 03 00 00 	mvhi r3,0x0
 500:	38 02 c3 50 	mvu r2,0xc350
 504:	38 63 09 c8 	ori r3,r3,0x9c8
 508:	88 22 08 00 	mul r1,r1,r2
 50c:	28 62 00 00 	lw r2,(r3+0)
 510:	28 42 00 00 	lw r2,(r2+0)
 514:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 518:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 51c:	34 01 00 08 	mvi r1,8
 520:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 524:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 528:	20 21 00 01 	andi r1,r1,0x1
 52c:	44 20 ff fe 	be r1,r0,524 <_Z6msleepj+0x28>
}
 530:	c3 a0 00 00 	ret

00000534 <_Z6nsleepj>:
	timer0->compare1 = (FCPU/1000000)*nsec;
 534:	78 03 00 00 	mvhi r3,0x0
 538:	38 63 09 cc 	ori r3,r3,0x9cc
 53c:	28 62 00 00 	lw r2,(r3+0)
 540:	08 21 00 32 	muli r1,r1,50
 544:	28 42 00 00 	lw r2,(r2+0)
 548:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 54c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 550:	34 01 00 08 	mvi r1,8
 554:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 558:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 55c:	20 21 00 01 	andi r1,r1,0x1
 560:	44 20 ff fe 	be r1,r0,558 <_Z6nsleepj+0x24>
}
 564:	c3 a0 00 00 	ret

00000568 <_Z8tic_initv>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 568:	78 02 00 00 	mvhi r2,0x0
 56c:	38 42 09 d0 	ori r2,r2,0x9d0
 570:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
 574:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
 578:	34 02 13 88 	mvi r2,5000
 57c:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
 580:	38 63 09 d4 	ori r3,r3,0x9d4
	timer0->compare0 = (FCPU/10000);
 584:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
 588:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
 58c:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
 590:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
 594:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 598:	34 02 00 0e 	mvi r2,14
 59c:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
 5a0:	78 02 00 00 	mvhi r2,0x0
 5a4:	38 42 09 d8 	ori r2,r2,0x9d8
 5a8:	38 63 09 dc 	ori r3,r3,0x9dc
 5ac:	28 41 00 00 	lw r1,(r2+0)
 5b0:	28 62 00 00 	lw r2,(r3+0)
 5b4:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
 5b8:	c3 a0 00 00 	ret

000005bc <_Z9uart_initv>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 5bc:	c3 a0 00 00 	ret

000005c0 <_Z12uart_getcharv>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 5c0:	78 02 00 00 	mvhi r2,0x0
 5c4:	38 42 09 e0 	ori r2,r2,0x9e0
 5c8:	28 41 00 00 	lw r1,(r2+0)
 5cc:	28 22 00 00 	lw r2,(r1+0)
 5d0:	28 41 00 00 	lw r1,(r2+0)
 5d4:	20 21 00 01 	andi r1,r1,0x1
 5d8:	44 20 ff fe 	be r1,r0,5d0 <_Z12uart_getcharv+0x10>
	return uart0->rxtx;
 5dc:	28 41 00 04 	lw r1,(r2+4)
}
 5e0:	20 21 00 ff 	andi r1,r1,0xff
 5e4:	c3 a0 00 00 	ret

000005e8 <_Z12uart_putcharc>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 5e8:	78 03 00 00 	mvhi r3,0x0
 5ec:	38 63 09 e4 	ori r3,r3,0x9e4
 5f0:	28 62 00 00 	lw r2,(r3+0)
{
 5f4:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 5f8:	28 43 00 00 	lw r3,(r2+0)
 5fc:	28 62 00 00 	lw r2,(r3+0)
 600:	20 42 00 10 	andi r2,r2,0x10
 604:	5c 40 ff fe 	bne r2,r0,5fc <_Z12uart_putcharc+0x14>
	uart0->rxtx = c;
 608:	58 61 00 04 	sw (r3+4),r1
}
 60c:	c3 a0 00 00 	ret

00000610 <_Z11uart_putstrPc>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 610:	40 24 00 00 	lbu r4,(r1+0)
 614:	44 80 00 0c 	be r4,r0,644 <_Z11uart_putstrPc+0x34>
	while (uart0->ucr & UART_BUSY) ;
 618:	78 03 00 00 	mvhi r3,0x0
 61c:	38 63 09 e8 	ori r3,r3,0x9e8
 620:	28 62 00 00 	lw r2,(r3+0)
 624:	28 43 00 00 	lw r3,(r2+0)
 628:	28 62 00 00 	lw r2,(r3+0)
 62c:	20 42 00 10 	andi r2,r2,0x10
 630:	5c 40 ff fe 	bne r2,r0,628 <_Z11uart_putstrPc+0x18>
	uart0->rxtx = c;
 634:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 638:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 63c:	40 24 00 00 	lbu r4,(r1+0)
 640:	5c 80 ff fa 	bne r4,r0,628 <_Z11uart_putstrPc+0x18>
	}
}
 644:	c3 a0 00 00 	ret

00000648 <_Z8i2c_initv>:
 * I2C Functions
 */
void i2c_init()
{

	i2c0->prerl =0x00;
 648:	78 02 00 00 	mvhi r2,0x0
 64c:	38 42 09 ec 	ori r2,r2,0x9ec
 650:	28 41 00 00 	lw r1,(r2+0)
	i2c0->prerh =0x50;
 654:	34 02 00 50 	mvi r2,80
	i2c0->prerl =0x00;
 658:	28 21 00 00 	lw r1,(r1+0)
 65c:	30 20 00 00 	sb (r1+0),r0
	i2c0->prerh =0x50;
 660:	30 22 00 01 	sb (r1+1),r2
	i2c0->ctr =0x80;
 664:	34 02 ff 80 	mvi r2,-128
 668:	30 22 00 02 	sb (r1+2),r2


}
 66c:	c3 a0 00 00 	ret

00000670 <_Z9i2c_writeccc>:

void i2c_write(char addrDev, char addrReg, char dat)
{

   i2c0->TxRx=(addrDev<<1 +1);
 670:	78 05 00 00 	mvhi r5,0x0
 674:	38 a5 09 f0 	ori r5,r5,0x9f0
 678:	28 a4 00 00 	lw r4,(r5+0)
 67c:	3c 21 00 02 	sli r1,r1,2
{
 680:	20 42 00 ff 	andi r2,r2,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 684:	28 84 00 00 	lw r4,(r4+0)
 688:	20 21 00 fc 	andi r1,r1,0xfc
{
 68c:	20 63 00 ff 	andi r3,r3,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 690:	30 81 00 03 	sb (r4+3),r1
   i2c0->crsr =0x90;
 694:	34 01 ff 90 	mvi r1,-112
 698:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 69c:	40 81 00 04 	lbu r1,(r4+4)
 6a0:	20 21 00 02 	andi r1,r1,0x2
 6a4:	5c 20 ff fe 	bne r1,r0,69c <_Z9i2c_writeccc+0x2c>
   i2c0->TxRx=addrReg;
 6a8:	30 82 00 03 	sb (r4+3),r2
   i2c0->crsr =0x10;
 6ac:	34 01 00 10 	mvi r1,16
 6b0:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 6b4:	40 81 00 04 	lbu r1,(r4+4)
 6b8:	20 21 00 02 	andi r1,r1,0x2
 6bc:	5c 20 ff fe 	bne r1,r0,6b4 <_Z9i2c_writeccc+0x44>
   
   i2c0->TxRx=dat;
 6c0:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x10;
 6c4:	34 01 00 10 	mvi r1,16
 6c8:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 6cc:	40 81 00 04 	lbu r1,(r4+4)
 6d0:	20 21 00 02 	andi r1,r1,0x2
 6d4:	5c 20 ff fe 	bne r1,r0,6cc <_Z9i2c_writeccc+0x5c>
//........... todo byte 70 9

   i2c0->TxRx=dat; // last byte
 6d8:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x50;
 6dc:	34 01 00 50 	mvi r1,80
 6e0:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 6e4:	40 81 00 04 	lbu r1,(r4+4)
 6e8:	20 21 00 02 	andi r1,r1,0x2
 6ec:	5c 20 ff fe 	bne r1,r0,6e4 <_Z9i2c_writeccc+0x74>
//7

}
 6f0:	c3 a0 00 00 	ret

000006f4 <_ZN3pwm7pwm_selEicb>:
#include "pwm.h"
#include "soc-hw.h"

void pwm::pwm_sel(int b, char c, bool en){
 6f4:	37 9c ff e8 	addi sp,sp,-24
 6f8:	5b 8b 00 18 	sw (sp+24),r11
 6fc:	5b 8c 00 14 	sw (sp+20),r12
 700:	5b 8d 00 10 	sw (sp+16),r13
 704:	5b 8e 00 0c 	sw (sp+12),r14
 708:	5b 8f 00 08 	sw (sp+8),r15
 70c:	5b 9d 00 04 	sw (sp+4),ra
uint8_t Rd=0;
uint8_t Wr=1;
uint32_t dint=1000000;
uint32_t dind;

uint32_t e=b*12;
 710:	08 4b 00 0c 	muli r11,r2,12
void pwm::pwm_sel(int b, char c, bool en){
 714:	20 63 00 ff 	andi r3,r3,0xff


if(c==0x11){
dind=0x36*1000;
}
if(c==0x12){
 718:	34 01 00 12 	mvi r1,18
void pwm::pwm_sel(int b, char c, bool en){
 71c:	20 8f 00 ff 	andi r15,r4,0xff
uint32_t d=e+8;
 720:	35 6d 00 08 	addi r13,r11,8
uint32_t t=e+4;
 724:	35 6e 00 04 	addi r14,r11,4
if(c==0x12){
 728:	44 61 00 26 	be r3,r1,7c0 <_ZN3pwm7pwm_selEicb+0xcc>
dind=0x83*1000;
}
if(c==0x10){
 72c:	34 01 00 10 	mvi r1,16
dind=0xda*1000;
 730:	38 0c 53 90 	mvu r12,0x5390
 734:	79 8c 00 03 	orhi r12,r12,0x3
if(c==0x10){
 738:	5c 61 00 1a 	bne r3,r1,7a0 <_ZN3pwm7pwm_selEicb+0xac>
e=e+48;
d=e+8;
t=e+4;
}

pwm_wr(Wr); pwm_rd(Rd);
 73c:	34 01 00 01 	mvi r1,1
 740:	fb ff ff 1d 	calli 3b4 <_Z6pwm_wrh>
 744:	34 01 00 00 	mvi r1,0
 748:	fb ff ff 0e 	calli 380 <_Z6pwm_rdh>
pwm_addr(t); pwm_din(dint);
 74c:	b9 c0 08 00 	mv r1,r14
 750:	fb ff ff 13 	calli 39c <_Z8pwm_addrj>
 754:	38 01 42 40 	mvu r1,0x4240
 758:	78 21 00 0f 	orhi r1,r1,0xf
 75c:	fb ff ff 1d 	calli 3d0 <_Z7pwm_dinj>

pwm_addr(d); pwm_din(dind);
 760:	b9 a0 08 00 	mv r1,r13
 764:	fb ff ff 0e 	calli 39c <_Z8pwm_addrj>
 768:	b9 80 08 00 	mv r1,r12
 76c:	fb ff ff 19 	calli 3d0 <_Z7pwm_dinj>

pwm_addr(e); pwm_din(en);
 770:	b9 60 08 00 	mv r1,r11
 774:	fb ff ff 0a 	calli 39c <_Z8pwm_addrj>
 778:	b9 e0 08 00 	mv r1,r15
 77c:	fb ff ff 15 	calli 3d0 <_Z7pwm_dinj>


};
 780:	2b 9d 00 04 	lw ra,(sp+4)
 784:	2b 8b 00 18 	lw r11,(sp+24)
 788:	2b 8c 00 14 	lw r12,(sp+20)
 78c:	2b 8d 00 10 	lw r13,(sp+16)
 790:	2b 8e 00 0c 	lw r14,(sp+12)
 794:	2b 8f 00 08 	lw r15,(sp+8)
 798:	37 9c 00 18 	addi sp,sp,24
 79c:	c3 a0 00 00 	ret
if(c==0x13){
 7a0:	34 01 00 13 	mvi r1,19
 7a4:	5c 61 00 0a 	bne r3,r1,7cc <_ZN3pwm7pwm_selEicb+0xd8>
d=e+8;
 7a8:	35 6d 00 38 	addi r13,r11,56
t=e+4;
 7ac:	35 6e 00 34 	addi r14,r11,52
dind=180000;
 7b0:	38 0c bf 20 	mvu r12,0xbf20
 7b4:	79 8c 00 02 	orhi r12,r12,0x2
e=e+48;
 7b8:	35 6b 00 30 	addi r11,r11,48
 7bc:	e3 ff ff e0 	bi 73c <_ZN3pwm7pwm_selEicb+0x48>
dind=0x83*1000;
 7c0:	38 0c ff b8 	mvu r12,0xffb8
 7c4:	79 8c 00 01 	orhi r12,r12,0x1
 7c8:	e3 ff ff dd 	bi 73c <_ZN3pwm7pwm_selEicb+0x48>
if(c==0x14){
 7cc:	34 01 00 14 	mvi r1,20
 7d0:	38 0c d2 f0 	mvu r12,0xd2f0
 7d4:	5c 61 ff da 	bne r3,r1,73c <_ZN3pwm7pwm_selEicb+0x48>
d=e+8;
 7d8:	35 6d 00 38 	addi r13,r11,56
t=e+4;
 7dc:	35 6e 00 34 	addi r14,r11,52
dind=100000;
 7e0:	38 0c 86 a0 	mvu r12,0x86a0
 7e4:	79 8c 00 01 	orhi r12,r12,0x1
e=e+48;
 7e8:	35 6b 00 30 	addi r11,r11,48
 7ec:	e3 ff ff d4 	bi 73c <_ZN3pwm7pwm_selEicb+0x48>

000007f0 <_ZN3pwm5brazoEc>:

int pwm::brazo(char d){
 7f0:	20 42 00 ff 	andi r2,r2,0xff
int m;
if(d==0x01){m=0;}
if(d==0x02){m=1;}
 7f4:	34 03 00 02 	mvi r3,2
 7f8:	34 01 00 01 	mvi r1,1
 7fc:	44 43 00 04 	be r2,r3,80c <_ZN3pwm5brazoEc+0x1c>
if(d==0x03){m=2;}
 800:	34 03 00 03 	mvi r3,3
 804:	34 01 00 02 	mvi r1,2
 808:	5c 43 00 02 	bne r2,r3,810 <_ZN3pwm5brazoEc+0x20>
if(d==0x04){m=3;}
return m;
};
 80c:	c3 a0 00 00 	ret
if(d==0x04){m=3;}
 810:	34 03 00 04 	mvi r3,4
 814:	34 01 00 00 	mvi r1,0
 818:	5c 43 ff fd 	bne r2,r3,80c <_ZN3pwm5brazoEc+0x1c>
 81c:	34 01 00 03 	mvi r1,3
};
 820:	c3 a0 00 00 	ret

00000824 <_ZN5timer6nsleepEi>:
void timer::nsleep(int nsec)
{
	int tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 824:	78 03 00 00 	mvhi r3,0x0
 828:	38 63 09 f4 	ori r3,r3,0x9f4
 82c:	28 61 00 00 	lw r1,(r3+0)
 830:	08 42 00 32 	muli r2,r2,50
 834:	28 23 00 00 	lw r3,(r1+0)
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 838:	34 01 00 08 	mvi r1,8
	timer0->compare1 = (FCPU/1000000)*nsec;
 83c:	58 62 00 10 	sw (r3+16),r2
	timer0->counter1 = 0;
 840:	58 60 00 14 	sw (r3+20),r0
	timer0->tcr1 = TIMER_EN;
 844:	58 61 00 0c 	sw (r3+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 848:	28 61 00 0c 	lw r1,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 84c:	20 21 00 01 	andi r1,r1,0x1
 850:	44 20 ff fe 	be r1,r0,848 <_ZN5timer6nsleepEi+0x24>
};
 854:	c3 a0 00 00 	ret

00000858 <_ZN4uart9uart_initEv>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 858:	c3 a0 00 00 	ret

0000085c <_ZN4uart12uart_getcharEv>:

char uart::uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 85c:	78 02 00 00 	mvhi r2,0x0
 860:	38 42 09 f8 	ori r2,r2,0x9f8
 864:	28 41 00 00 	lw r1,(r2+0)
 868:	28 22 00 00 	lw r2,(r1+0)
 86c:	28 41 00 00 	lw r1,(r2+0)
 870:	20 21 00 01 	andi r1,r1,0x1
 874:	44 20 ff fe 	be r1,r0,86c <_ZN4uart12uart_getcharEv+0x10>
	return uart0->rxtx;
 878:	28 41 00 04 	lw r1,(r2+4)
}
 87c:	20 21 00 ff 	andi r1,r1,0xff
 880:	c3 a0 00 00 	ret

00000884 <_ZN4uart12uart_putcharEc>:

void uart::uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 884:	78 03 00 00 	mvhi r3,0x0
 888:	38 63 09 fc 	ori r3,r3,0x9fc
 88c:	28 61 00 00 	lw r1,(r3+0)
{
 890:	20 42 00 ff 	andi r2,r2,0xff
	while (uart0->ucr & UART_BUSY) ;
 894:	28 23 00 00 	lw r3,(r1+0)
 898:	28 61 00 00 	lw r1,(r3+0)
 89c:	20 21 00 10 	andi r1,r1,0x10
 8a0:	5c 20 ff fe 	bne r1,r0,898 <_ZN4uart12uart_putcharEc+0x14>
	uart0->rxtx = c;
 8a4:	58 62 00 04 	sw (r3+4),r2
}
 8a8:	c3 a0 00 00 	ret

000008ac <_ZN4uart11uart_putstrEPc>:

void uart::uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 8ac:	40 44 00 00 	lbu r4,(r2+0)
 8b0:	44 80 00 0c 	be r4,r0,8e0 <_ZN4uart11uart_putstrEPc+0x34>
	while (uart0->ucr & UART_BUSY) ;
 8b4:	78 03 00 00 	mvhi r3,0x0
 8b8:	38 63 0a 00 	ori r3,r3,0xa00
 8bc:	28 61 00 00 	lw r1,(r3+0)
 8c0:	28 23 00 00 	lw r3,(r1+0)
 8c4:	28 61 00 00 	lw r1,(r3+0)
 8c8:	20 21 00 10 	andi r1,r1,0x10
 8cc:	5c 20 ff fe 	bne r1,r0,8c4 <_ZN4uart11uart_putstrEPc+0x18>
	uart0->rxtx = c;
 8d0:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 8d4:	34 42 00 01 	addi r2,r2,1
	while(*c) {
 8d8:	40 44 00 00 	lbu r4,(r2+0)
 8dc:	5c 80 ff fa 	bne r4,r0,8c4 <_ZN4uart11uart_putstrEPc+0x18>
	}
}
 8e0:	c3 a0 00 00 	ret

000008e4 <_ZN4uart11uart_getintEv>:

int uart::uart_getint()
{   
	while (! (uart0->ucr & UART_DR)) ;
 8e4:	78 02 00 00 	mvhi r2,0x0
 8e8:	38 42 0a 04 	ori r2,r2,0xa04
 8ec:	28 41 00 00 	lw r1,(r2+0)
 8f0:	28 22 00 00 	lw r2,(r1+0)
 8f4:	28 41 00 00 	lw r1,(r2+0)
 8f8:	20 21 00 01 	andi r1,r1,0x1
 8fc:	44 20 ff fe 	be r1,r0,8f4 <_ZN4uart11uart_getintEv+0x10>
	return uart0->rxtx;
 900:	28 41 00 04 	lw r1,(r2+4)
}
 904:	c3 a0 00 00 	ret

00000908 <_ZN6camera9cam_tomarEi>:
#include "camera.h"
#include "soc-hw.h"


void camera::cam_tomar(int take)
{
 908:	37 9c ff fc 	addi sp,sp,-4
 90c:	5b 9d 00 04 	sw (sp+4),ra
	cam_takepicture(take);
 910:	20 41 00 ff 	andi r1,r2,0xff
 914:	fb ff fe 7b 	calli 300 <_Z15cam_takepictureh>

};
 918:	2b 9d 00 04 	lw ra,(sp+4)
 91c:	37 9c 00 04 	addi sp,sp,4
 920:	c3 a0 00 00 	ret

00000924 <_ZN6camera8cam_leerEi>:

void camera::cam_leer(int lee)
{	
 924:	e0 00 00 00 	bi 924 <_ZN6camera8cam_leerEi>

00000928 <_ZN6camera8cam_datoEv>:
	cam_leer(lee);
	
};
char camera::cam_dato()
{	
 928:	37 9c ff fc 	addi sp,sp,-4
 92c:	5b 9d 00 04 	sw (sp+4),ra
	char t=cam_read();
 930:	fb ff fe 6e 	calli 2e8 <_Z8cam_readv>
	return t;
}
 934:	20 21 00 ff 	andi r1,r1,0xff
 938:	2b 9d 00 04 	lw ra,(sp+4)
 93c:	37 9c 00 04 	addi sp,sp,4
 940:	c3 a0 00 00 	ret

00000944 <_ZN6camera7cam_rstEii>:

void camera::cam_rst(int wrst, int rrst)
{
 944:	37 9c ff f8 	addi sp,sp,-8
 948:	5b 8b 00 08 	sw (sp+8),r11
 94c:	5b 9d 00 04 	sw (sp+4),ra
	cam_resetwr  (wrst);
 950:	20 41 00 ff 	andi r1,r2,0xff
{
 954:	b8 60 58 00 	mv r11,r3
	cam_resetwr  (wrst);
 958:	fb ff fe 77 	calli 334 <_Z11cam_resetwrh>
	cam_resetrd (rrst);
 95c:	b9 60 08 00 	mv r1,r11
 960:	fb ff fe 7c 	calli 350 <_Z11cam_resetrdj>
};
 964:	2b 9d 00 04 	lw ra,(sp+4)
 968:	2b 8b 00 08 	lw r11,(sp+8)
 96c:	37 9c 00 08 	addi sp,sp,8
 970:	c3 a0 00 00 	ret
