
image:     formato del fichero elf32-lm32

Secciones:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a74  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000070  00000a74  00000a74  00000ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00000ae4  00000ae4  00000b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000afc  00000afc  00000b50  2**2
                  ALLOC
  4 .debug_frame  0000023c  00000000  00000000  00000b50  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001472  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005fd  00000000  00000000  000021fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000080  00000000  00000000  000027fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000028  00000000  00000000  0000287b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000763  00000000  00000000  000028a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c3  00000000  00000000  00003006  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  000034c9  2**0
                  CONTENTS, READONLY
 12 .debug_loc    0000034d  00000000  00000000  000034da  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la secci√≥n .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 33 	calli e0 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_scall_handler>:
  c0:	34 00 00 00 	nop
  c4:	34 00 00 00 	nop
  c8:	34 00 00 00 	nop
  cc:	34 00 00 00 	nop
  d0:	34 00 00 00 	nop
  d4:	34 00 00 00 	nop
  d8:	34 00 00 00 	nop
  dc:	34 00 00 00 	nop

000000e0 <_crt0>:
  e0:	78 1c 00 00 	mvhi sp,0x0
  e4:	3b 9c 0f fc 	ori sp,sp,0xffc
  e8:	78 1a 00 00 	mvhi gp,0x0
  ec:	3b 5a 0b 00 	ori gp,gp,0xb00
  f0:	78 01 00 00 	mvhi r1,0x0
  f4:	38 21 0a fc 	ori r1,r1,0xafc
  f8:	78 03 00 00 	mvhi r3,0x0
  fc:	38 63 0b 80 	ori r3,r3,0xb80

00000100 <.clearBSS>:
 100:	44 23 00 04 	be r1,r3,110 <.callMain>
 104:	58 20 00 00 	sw (r1+0),r0
 108:	34 21 00 04 	addi r1,r1,4
 10c:	e3 ff ff fd 	bi 100 <.clearBSS>

00000110 <.callMain>:
 110:	34 01 00 00 	mvi r1,0
 114:	34 02 00 00 	mvi r2,0
 118:	34 03 00 00 	mvi r3,0
 11c:	f8 00 00 33 	calli 1e8 <main>

00000120 <irq_enable>:
 120:	34 01 00 01 	mvi r1,1
 124:	d0 01 00 00 	wcsr IE,r1
 128:	c3 a0 00 00 	ret

0000012c <irq_disable>:
 12c:	34 01 00 00 	mvi r1,0
 130:	d0 01 00 00 	wcsr IE,r1
 134:	c3 a0 00 00 	ret

00000138 <irq_set_mask>:
 138:	d0 21 00 00 	wcsr IM,r1
 13c:	c3 a0 00 00 	ret

00000140 <irq_get_mask>:
 140:	90 20 08 00 	rcsr r1,IM
 144:	c3 a0 00 00 	ret

00000148 <jump>:
 148:	c0 20 00 00 	b r1

0000014c <halt>:
 14c:	e0 00 00 00 	bi 14c <halt>

00000150 <_save_all>:
 150:	37 9c ff 80 	addi sp,sp,-128
 154:	5b 81 00 04 	sw (sp+4),r1
 158:	5b 82 00 08 	sw (sp+8),r2
 15c:	5b 83 00 0c 	sw (sp+12),r3
 160:	5b 84 00 10 	sw (sp+16),r4
 164:	5b 85 00 14 	sw (sp+20),r5
 168:	5b 86 00 18 	sw (sp+24),r6
 16c:	5b 87 00 1c 	sw (sp+28),r7
 170:	5b 88 00 20 	sw (sp+32),r8
 174:	5b 89 00 24 	sw (sp+36),r9
 178:	5b 8a 00 28 	sw (sp+40),r10
 17c:	5b 9e 00 78 	sw (sp+120),ea
 180:	5b 9f 00 7c 	sw (sp+124),ba
 184:	2b 81 00 80 	lw r1,(sp+128)
 188:	5b 81 00 74 	sw (sp+116),r1
 18c:	bb 80 08 00 	mv r1,sp
 190:	34 21 00 80 	addi r1,r1,128
 194:	5b 81 00 70 	sw (sp+112),r1
 198:	c3 a0 00 00 	ret

0000019c <_restore_all_and_eret>:
 19c:	2b 81 00 04 	lw r1,(sp+4)
 1a0:	2b 82 00 08 	lw r2,(sp+8)
 1a4:	2b 83 00 0c 	lw r3,(sp+12)
 1a8:	2b 84 00 10 	lw r4,(sp+16)
 1ac:	2b 85 00 14 	lw r5,(sp+20)
 1b0:	2b 86 00 18 	lw r6,(sp+24)
 1b4:	2b 87 00 1c 	lw r7,(sp+28)
 1b8:	2b 88 00 20 	lw r8,(sp+32)
 1bc:	2b 89 00 24 	lw r9,(sp+36)
 1c0:	2b 8a 00 28 	lw r10,(sp+40)
 1c4:	2b 9d 00 74 	lw ra,(sp+116)
 1c8:	2b 9e 00 78 	lw ea,(sp+120)
 1cc:	2b 9f 00 7c 	lw ba,(sp+124)
 1d0:	2b 9c 00 70 	lw sp,(sp+112)
 1d4:	c3 c0 00 00 	eret

000001d8 <get_sp>:
 1d8:	bb 80 08 00 	mv r1,sp
 1dc:	c3 a0 00 00 	ret

000001e0 <get_gp>:
 1e0:	bb 40 08 00 	mv r1,gp
 1e4:	c3 a0 00 00 	ret

000001e8 <main>:
//#include "soc-hw.h"/*
#include "timer.h"
#include "pwm.h"


int main(){
 1e8:	37 9c ff e4 	addi sp,sp,-28
 1ec:	5b 8b 00 08 	sw (sp+8),r11
 1f0:	5b 9d 00 04 	sw (sp+4),ra

pwm motor;
timer tiempo;
motor.pwm_sel(motor.brazo(1), 4, true);
 1f4:	34 02 00 01 	mvi r2,1
 1f8:	37 81 00 10 	addi r1,sp,16
 1fc:	f8 00 02 05 	calli a10 <_ZN3pwm5brazoEi>
 200:	34 04 00 01 	mvi r4,1
 204:	34 03 00 04 	mvi r3,4
 208:	b8 20 10 00 	mv r2,r1
 20c:	37 81 00 10 	addi r1,sp,16
 210:	f8 00 01 c3 	calli 91c <_ZN3pwm7pwm_selEiib>
motor.pwm_sel(motor.brazo(2), 4, true);
 214:	34 02 00 02 	mvi r2,2
 218:	37 81 00 10 	addi r1,sp,16
 21c:	f8 00 01 fd 	calli a10 <_ZN3pwm5brazoEi>
 220:	34 04 00 01 	mvi r4,1
 224:	34 03 00 04 	mvi r3,4
 228:	b8 20 10 00 	mv r2,r1
 22c:	37 81 00 10 	addi r1,sp,16
 230:	f8 00 01 bb 	calli 91c <_ZN3pwm7pwm_selEiib>
motor.pwm_sel(motor.brazo(3), 4, true);
 234:	34 02 00 03 	mvi r2,3
 238:	37 81 00 10 	addi r1,sp,16
 23c:	f8 00 01 f5 	calli a10 <_ZN3pwm5brazoEi>
 240:	34 04 00 01 	mvi r4,1
 244:	34 03 00 04 	mvi r3,4
 248:	b8 20 10 00 	mv r2,r1
 24c:	37 81 00 10 	addi r1,sp,16
 250:	f8 00 01 b3 	calli 91c <_ZN3pwm7pwm_selEiib>
motor.pwm_sel(motor.brazo(4), 4, true);
 254:	34 02 00 04 	mvi r2,4
 258:	37 81 00 10 	addi r1,sp,16
 25c:	f8 00 01 ed 	calli a10 <_ZN3pwm5brazoEi>
 260:	34 04 00 01 	mvi r4,1
 264:	34 03 00 04 	mvi r3,4
 268:	b8 20 10 00 	mv r2,r1
 26c:	37 81 00 10 	addi r1,sp,16
 270:	f8 00 01 ab 	calli 91c <_ZN3pwm7pwm_selEiib>
tiempo.nsleep(3000000);
 274:	38 0b c6 c0 	mvu r11,0xc6c0
 278:	79 6b 00 2d 	orhi r11,r11,0x2d
 27c:	b9 60 10 00 	mv r2,r11
 280:	37 81 00 0c 	addi r1,sp,12
 284:	f8 00 01 ef 	calli a40 <_ZN5timer6nsleepEi>
motor.pwm_sel(motor.brazo(1), 5, true);
 288:	34 02 00 01 	mvi r2,1
 28c:	37 81 00 10 	addi r1,sp,16
 290:	f8 00 01 e0 	calli a10 <_ZN3pwm5brazoEi>
 294:	34 04 00 01 	mvi r4,1
 298:	34 03 00 05 	mvi r3,5
 29c:	b8 20 10 00 	mv r2,r1
 2a0:	37 81 00 10 	addi r1,sp,16
 2a4:	f8 00 01 9e 	calli 91c <_ZN3pwm7pwm_selEiib>
motor.pwm_sel(motor.brazo(2), 5, true);
 2a8:	34 02 00 02 	mvi r2,2
 2ac:	37 81 00 10 	addi r1,sp,16
 2b0:	f8 00 01 d8 	calli a10 <_ZN3pwm5brazoEi>
 2b4:	34 04 00 01 	mvi r4,1
 2b8:	34 03 00 05 	mvi r3,5
 2bc:	b8 20 10 00 	mv r2,r1
 2c0:	37 81 00 10 	addi r1,sp,16
 2c4:	f8 00 01 96 	calli 91c <_ZN3pwm7pwm_selEiib>
motor.pwm_sel(motor.brazo(3), 5, true);
 2c8:	34 02 00 03 	mvi r2,3
 2cc:	37 81 00 10 	addi r1,sp,16
 2d0:	f8 00 01 d0 	calli a10 <_ZN3pwm5brazoEi>
 2d4:	34 04 00 01 	mvi r4,1
 2d8:	34 03 00 05 	mvi r3,5
 2dc:	b8 20 10 00 	mv r2,r1
 2e0:	37 81 00 10 	addi r1,sp,16
 2e4:	f8 00 01 8e 	calli 91c <_ZN3pwm7pwm_selEiib>
motor.pwm_sel(motor.brazo(4), 5, true);
 2e8:	34 02 00 04 	mvi r2,4
 2ec:	37 81 00 10 	addi r1,sp,16
 2f0:	f8 00 01 c8 	calli a10 <_ZN3pwm5brazoEi>
 2f4:	34 04 00 01 	mvi r4,1
 2f8:	34 03 00 05 	mvi r3,5
 2fc:	b8 20 10 00 	mv r2,r1
 300:	37 81 00 10 	addi r1,sp,16
 304:	f8 00 01 86 	calli 91c <_ZN3pwm7pwm_selEiib>
tiempo.nsleep(3000000);
 308:	b9 60 10 00 	mv r2,r11
 30c:	37 81 00 0c 	addi r1,sp,12
 310:	f8 00 01 cc 	calli a40 <_ZN5timer6nsleepEi>
motor.pwm_sel(motor.brazo(1), 1, true);
 314:	34 02 00 01 	mvi r2,1
 318:	37 81 00 10 	addi r1,sp,16
 31c:	f8 00 01 bd 	calli a10 <_ZN3pwm5brazoEi>
 320:	34 04 00 01 	mvi r4,1
 324:	34 03 00 01 	mvi r3,1
 328:	b8 20 10 00 	mv r2,r1
 32c:	37 81 00 10 	addi r1,sp,16
 330:	f8 00 01 7b 	calli 91c <_ZN3pwm7pwm_selEiib>
motor.pwm_sel(motor.brazo(2), 2, true);
 334:	34 02 00 02 	mvi r2,2
 338:	37 81 00 10 	addi r1,sp,16
 33c:	f8 00 01 b5 	calli a10 <_ZN3pwm5brazoEi>
 340:	34 04 00 01 	mvi r4,1
 344:	34 03 00 02 	mvi r3,2
 348:	b8 20 10 00 	mv r2,r1
 34c:	37 81 00 10 	addi r1,sp,16
 350:	f8 00 01 73 	calli 91c <_ZN3pwm7pwm_selEiib>
motor.pwm_sel(motor.brazo(3), 1, true);
 354:	34 02 00 03 	mvi r2,3
 358:	37 81 00 10 	addi r1,sp,16
 35c:	f8 00 01 ad 	calli a10 <_ZN3pwm5brazoEi>
 360:	34 04 00 01 	mvi r4,1
 364:	34 03 00 01 	mvi r3,1
 368:	b8 20 10 00 	mv r2,r1
 36c:	37 81 00 10 	addi r1,sp,16
 370:	f8 00 01 6b 	calli 91c <_ZN3pwm7pwm_selEiib>
motor.pwm_sel(motor.brazo(4), 2, true);
 374:	34 02 00 04 	mvi r2,4
 378:	37 81 00 10 	addi r1,sp,16
 37c:	f8 00 01 a5 	calli a10 <_ZN3pwm5brazoEi>
 380:	34 04 00 01 	mvi r4,1
 384:	34 03 00 02 	mvi r3,2
 388:	b8 20 10 00 	mv r2,r1
 38c:	37 81 00 10 	addi r1,sp,16
 390:	f8 00 01 63 	calli 91c <_ZN3pwm7pwm_selEiib>
tiempo.nsleep(3000000);
 394:	b9 60 10 00 	mv r2,r11
 398:	37 81 00 0c 	addi r1,sp,12
 39c:	f8 00 01 a9 	calli a40 <_ZN5timer6nsleepEi>
motor.pwm_sel(motor.brazo(1), 2, true);
 3a0:	34 02 00 01 	mvi r2,1
 3a4:	37 81 00 10 	addi r1,sp,16
 3a8:	f8 00 01 9a 	calli a10 <_ZN3pwm5brazoEi>
 3ac:	34 04 00 01 	mvi r4,1
 3b0:	34 03 00 02 	mvi r3,2
 3b4:	b8 20 10 00 	mv r2,r1
 3b8:	37 81 00 10 	addi r1,sp,16
 3bc:	f8 00 01 58 	calli 91c <_ZN3pwm7pwm_selEiib>
motor.pwm_sel(motor.brazo(2), 1, true);
 3c0:	34 02 00 02 	mvi r2,2
 3c4:	37 81 00 10 	addi r1,sp,16
 3c8:	f8 00 01 92 	calli a10 <_ZN3pwm5brazoEi>
 3cc:	34 04 00 01 	mvi r4,1
 3d0:	34 03 00 01 	mvi r3,1
 3d4:	b8 20 10 00 	mv r2,r1
 3d8:	37 81 00 10 	addi r1,sp,16
 3dc:	f8 00 01 50 	calli 91c <_ZN3pwm7pwm_selEiib>
motor.pwm_sel(motor.brazo(3), 2, true);
 3e0:	34 02 00 03 	mvi r2,3
 3e4:	37 81 00 10 	addi r1,sp,16
 3e8:	f8 00 01 8a 	calli a10 <_ZN3pwm5brazoEi>
 3ec:	34 04 00 01 	mvi r4,1
 3f0:	34 03 00 02 	mvi r3,2
 3f4:	b8 20 10 00 	mv r2,r1
 3f8:	37 81 00 10 	addi r1,sp,16
 3fc:	f8 00 01 48 	calli 91c <_ZN3pwm7pwm_selEiib>
motor.pwm_sel(motor.brazo(4), 1, true);
 400:	34 02 00 04 	mvi r2,4
 404:	37 81 00 10 	addi r1,sp,16
 408:	f8 00 01 82 	calli a10 <_ZN3pwm5brazoEi>
 40c:	34 04 00 01 	mvi r4,1
 410:	34 03 00 01 	mvi r3,1
 414:	b8 20 10 00 	mv r2,r1
 418:	37 81 00 10 	addi r1,sp,16
 41c:	f8 00 01 40 	calli 91c <_ZN3pwm7pwm_selEiib>
tiempo.nsleep(3000000);
 420:	b9 60 10 00 	mv r2,r11
 424:	37 81 00 0c 	addi r1,sp,12
 428:	f8 00 01 86 	calli a40 <_ZN5timer6nsleepEi>
motor.pwm_sel(motor.brazo(1), 3, true);
 42c:	34 02 00 01 	mvi r2,1
 430:	37 81 00 10 	addi r1,sp,16
 434:	f8 00 01 77 	calli a10 <_ZN3pwm5brazoEi>
 438:	34 04 00 01 	mvi r4,1
 43c:	34 03 00 03 	mvi r3,3
 440:	b8 20 10 00 	mv r2,r1
 444:	37 81 00 10 	addi r1,sp,16
 448:	f8 00 01 35 	calli 91c <_ZN3pwm7pwm_selEiib>
motor.pwm_sel(motor.brazo(2), 2, true);
 44c:	34 02 00 02 	mvi r2,2
 450:	37 81 00 10 	addi r1,sp,16
 454:	f8 00 01 6f 	calli a10 <_ZN3pwm5brazoEi>
 458:	34 04 00 01 	mvi r4,1
 45c:	34 03 00 02 	mvi r3,2
 460:	b8 20 10 00 	mv r2,r1
 464:	37 81 00 10 	addi r1,sp,16
 468:	f8 00 01 2d 	calli 91c <_ZN3pwm7pwm_selEiib>
motor.pwm_sel(motor.brazo(3), 3, true);
 46c:	34 02 00 03 	mvi r2,3
 470:	37 81 00 10 	addi r1,sp,16
 474:	f8 00 01 67 	calli a10 <_ZN3pwm5brazoEi>
 478:	34 04 00 01 	mvi r4,1
 47c:	34 03 00 03 	mvi r3,3
 480:	b8 20 10 00 	mv r2,r1
 484:	37 81 00 10 	addi r1,sp,16
 488:	f8 00 01 25 	calli 91c <_ZN3pwm7pwm_selEiib>
motor.pwm_sel(motor.brazo(4), 2, true);
 48c:	34 02 00 04 	mvi r2,4
 490:	37 81 00 10 	addi r1,sp,16
 494:	f8 00 01 5f 	calli a10 <_ZN3pwm5brazoEi>
 498:	34 04 00 01 	mvi r4,1
 49c:	34 03 00 02 	mvi r3,2
 4a0:	b8 20 10 00 	mv r2,r1
 4a4:	37 81 00 10 	addi r1,sp,16
 4a8:	f8 00 01 1d 	calli 91c <_ZN3pwm7pwm_selEiib>
tiempo.nsleep(3000000);
 4ac:	b9 60 10 00 	mv r2,r11
 4b0:	37 81 00 0c 	addi r1,sp,12
 4b4:	f8 00 01 63 	calli a40 <_ZN5timer6nsleepEi>
motor.pwm_sel(motor.brazo(1), 4, true);
 4b8:	34 02 00 01 	mvi r2,1
 4bc:	37 81 00 10 	addi r1,sp,16
 4c0:	f8 00 01 54 	calli a10 <_ZN3pwm5brazoEi>
 4c4:	34 04 00 01 	mvi r4,1
 4c8:	34 03 00 04 	mvi r3,4
 4cc:	b8 20 10 00 	mv r2,r1
 4d0:	37 81 00 10 	addi r1,sp,16
 4d4:	f8 00 01 12 	calli 91c <_ZN3pwm7pwm_selEiib>
motor.pwm_sel(motor.brazo(2), 4, true);
 4d8:	34 02 00 02 	mvi r2,2
 4dc:	37 81 00 10 	addi r1,sp,16
 4e0:	f8 00 01 4c 	calli a10 <_ZN3pwm5brazoEi>
 4e4:	34 04 00 01 	mvi r4,1
 4e8:	34 03 00 04 	mvi r3,4
 4ec:	b8 20 10 00 	mv r2,r1
 4f0:	37 81 00 10 	addi r1,sp,16
 4f4:	f8 00 01 0a 	calli 91c <_ZN3pwm7pwm_selEiib>
motor.pwm_sel(motor.brazo(3), 4, true);
 4f8:	34 02 00 03 	mvi r2,3
 4fc:	37 81 00 10 	addi r1,sp,16
 500:	f8 00 01 44 	calli a10 <_ZN3pwm5brazoEi>
 504:	34 04 00 01 	mvi r4,1
 508:	34 03 00 04 	mvi r3,4
 50c:	b8 20 10 00 	mv r2,r1
 510:	37 81 00 10 	addi r1,sp,16
 514:	f8 00 01 02 	calli 91c <_ZN3pwm7pwm_selEiib>
motor.pwm_sel(motor.brazo(4), 4, true);
 518:	34 02 00 04 	mvi r2,4
 51c:	37 81 00 10 	addi r1,sp,16
 520:	f8 00 01 3c 	calli a10 <_ZN3pwm5brazoEi>
 524:	34 04 00 01 	mvi r4,1
 528:	34 03 00 04 	mvi r3,4
 52c:	b8 20 10 00 	mv r2,r1
 530:	37 81 00 10 	addi r1,sp,16
 534:	f8 00 00 fa 	calli 91c <_ZN3pwm7pwm_selEiib>
tiempo.nsleep(3000000);
 538:	37 81 00 0c 	addi r1,sp,12
 53c:	b9 60 10 00 	mv r2,r11
 540:	f8 00 01 40 	calli a40 <_ZN5timer6nsleepEi>

}
 544:	34 01 00 00 	mvi r1,0
 548:	2b 9d 00 04 	lw ra,(sp+4)
 54c:	2b 8b 00 08 	lw r11,(sp+8)
 550:	37 9c 00 1c 	addi sp,sp,28
 554:	c3 a0 00 00 	ret

00000558 <_Z7tic_isrv>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 558:	78 01 00 00 	mvhi r1,0x0
 55c:	38 21 0a 74 	ori r1,r1,0xa74
 560:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 564:	78 04 00 00 	mvhi r4,0x0
 568:	38 84 0a 78 	ori r4,r4,0xa78
 56c:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
 570:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 574:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
 578:	34 21 00 01 	addi r1,r1,1
 57c:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 580:	34 01 00 0e 	mvi r1,14
 584:	58 61 00 00 	sw (r3+0),r1
}
 588:	c3 a0 00 00 	ret

0000058c <_Z8isr_nullv>:
 58c:	c3 a0 00 00 	ret

00000590 <_Z8pwm_readv>:
	return pwm -> d_out;
 590:	78 02 00 00 	mvhi r2,0x0
 594:	38 42 0a 7c 	ori r2,r2,0xa7c
 598:	28 41 00 00 	lw r1,(r2+0)
 59c:	28 21 00 00 	lw r1,(r1+0)
 5a0:	28 21 00 00 	lw r1,(r1+0)
}
 5a4:	c3 a0 00 00 	ret

000005a8 <_Z6pwm_rdh>:
pwm -> rd = vrd;
 5a8:	78 03 00 00 	mvhi r3,0x0
 5ac:	38 63 0a 80 	ori r3,r3,0xa80
 5b0:	28 62 00 00 	lw r2,(r3+0)
void pwm_rd(uint8_t vrd){
 5b4:	20 21 00 ff 	andi r1,r1,0xff
pwm -> rd = vrd;
 5b8:	28 42 00 00 	lw r2,(r2+0)
 5bc:	30 41 00 04 	sb (r2+4),r1
}
 5c0:	c3 a0 00 00 	ret

000005c4 <_Z8pwm_addrj>:
pwm -> addr = vaddr;
 5c4:	78 03 00 00 	mvhi r3,0x0
 5c8:	38 63 0a 84 	ori r3,r3,0xa84
 5cc:	28 62 00 00 	lw r2,(r3+0)
 5d0:	28 42 00 00 	lw r2,(r2+0)
 5d4:	58 41 00 08 	sw (r2+8),r1
}
 5d8:	c3 a0 00 00 	ret

000005dc <_Z6pwm_wrh>:
pwm -> wr = vwr;
 5dc:	78 03 00 00 	mvhi r3,0x0
 5e0:	38 63 0a 88 	ori r3,r3,0xa88
 5e4:	28 62 00 00 	lw r2,(r3+0)
void pwm_wr(uint8_t vwr){
 5e8:	20 21 00 ff 	andi r1,r1,0xff
pwm -> wr = vwr;
 5ec:	28 42 00 00 	lw r2,(r2+0)
 5f0:	30 41 00 0c 	sb (r2+12),r1
}
 5f4:	c3 a0 00 00 	ret

000005f8 <_Z7pwm_dinj>:
pwm -> d_in = vd_in;
 5f8:	78 03 00 00 	mvhi r3,0x0
 5fc:	38 63 0a 8c 	ori r3,r3,0xa8c
 600:	28 62 00 00 	lw r2,(r3+0)
 604:	28 42 00 00 	lw r2,(r2+0)
 608:	58 41 00 10 	sw (r2+16),r1
}
 60c:	c3 a0 00 00 	ret

00000610 <_Z15gpio_config_dirj>:
	gpio0 -> dir = vdir;
 610:	78 03 00 00 	mvhi r3,0x0
 614:	38 63 0a 90 	ori r3,r3,0xa90
 618:	28 62 00 00 	lw r2,(r3+0)
 61c:	28 42 00 00 	lw r2,(r2+0)
 620:	58 41 00 08 	sw (r2+8),r1
}
 624:	c3 a0 00 00 	ret

00000628 <_Z10gpio_writej>:
	gpio0 -> wr = vpins;
 628:	78 03 00 00 	mvhi r3,0x0
 62c:	38 63 0a 94 	ori r3,r3,0xa94
 630:	28 62 00 00 	lw r2,(r3+0)
 634:	28 42 00 00 	lw r2,(r2+0)
 638:	58 41 00 04 	sw (r2+4),r1
}
 63c:	c3 a0 00 00 	ret

00000640 <_Z9gpio_readv>:
	return gpio0 -> rd;
 640:	78 02 00 00 	mvhi r2,0x0
 644:	38 42 0a 98 	ori r2,r2,0xa98
 648:	28 41 00 00 	lw r1,(r2+0)
 64c:	28 21 00 00 	lw r1,(r1+0)
 650:	28 21 00 00 	lw r1,(r1+0)
}
 654:	c3 a0 00 00 	ret

00000658 <_Z11irq_handlerj>:
{
 658:	37 9c ff f0 	addi sp,sp,-16
 65c:	5b 8b 00 10 	sw (sp+16),r11
 660:	5b 8c 00 0c 	sw (sp+12),r12
 664:	5b 8d 00 08 	sw (sp+8),r13
 668:	5b 9d 00 04 	sw (sp+4),ra
 66c:	78 02 00 00 	mvhi r2,0x0
 670:	38 42 0a 9c 	ori r2,r2,0xa9c
 674:	28 4b 00 00 	lw r11,(r2+0)
 678:	b8 20 60 00 	mv r12,r1
 67c:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 680:	21 81 00 01 	andi r1,r12,0x1
 684:	44 20 00 03 	be r1,r0,690 <_Z11irq_handlerj+0x38>
 688:	29 61 00 00 	lw r1,(r11+0)
 68c:	d8 20 00 00 	call r1
 690:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
 694:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 698:	5d ab ff fa 	bne r13,r11,680 <_Z11irq_handlerj+0x28>
}
 69c:	2b 9d 00 04 	lw ra,(sp+4)
 6a0:	2b 8b 00 10 	lw r11,(sp+16)
 6a4:	2b 8c 00 0c 	lw r12,(sp+12)
 6a8:	2b 8d 00 08 	lw r13,(sp+8)
 6ac:	37 9c 00 10 	addi sp,sp,16
 6b0:	c3 a0 00 00 	ret

000006b4 <_Z8isr_initv>:
{
 6b4:	78 02 00 00 	mvhi r2,0x0
 6b8:	38 42 0a a0 	ori r2,r2,0xaa0
 6bc:	28 41 00 00 	lw r1,(r2+0)
 6c0:	78 02 00 00 	mvhi r2,0x0
 6c4:	38 42 0a a4 	ori r2,r2,0xaa4
 6c8:	28 43 00 00 	lw r3,(r2+0)
 6cc:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 6d0:	58 23 00 00 	sw (r1+0),r3
 6d4:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
 6d8:	5c 22 ff fe 	bne r1,r2,6d0 <_Z8isr_initv+0x1c>
}
 6dc:	c3 a0 00 00 	ret

000006e0 <_Z12isr_registeriPFvvE>:
	isr_table[irq] = isr;
 6e0:	78 04 00 00 	mvhi r4,0x0
 6e4:	38 84 0a a8 	ori r4,r4,0xaa8
 6e8:	3c 23 00 02 	sli r3,r1,2
 6ec:	28 81 00 00 	lw r1,(r4+0)
 6f0:	b4 23 08 00 	add r1,r1,r3
 6f4:	58 22 00 00 	sw (r1+0),r2
}
 6f8:	c3 a0 00 00 	ret

000006fc <_Z14isr_unregisteri>:
	isr_table[irq] = &isr_null;
 6fc:	78 03 00 00 	mvhi r3,0x0
 700:	38 63 0a ac 	ori r3,r3,0xaac
 704:	3c 22 00 02 	sli r2,r1,2
 708:	28 61 00 00 	lw r1,(r3+0)
 70c:	78 03 00 00 	mvhi r3,0x0
 710:	38 63 0a b0 	ori r3,r3,0xab0
 714:	b4 22 08 00 	add r1,r1,r2
 718:	28 62 00 00 	lw r2,(r3+0)
 71c:	58 22 00 00 	sw (r1+0),r2
}
 720:	c3 a0 00 00 	ret

00000724 <_Z6msleepj>:
	timer0->compare1 = (FCPU/1000)*msec;
 724:	78 03 00 00 	mvhi r3,0x0
 728:	38 02 c3 50 	mvu r2,0xc350
 72c:	38 63 0a b4 	ori r3,r3,0xab4
 730:	88 22 08 00 	mul r1,r1,r2
 734:	28 62 00 00 	lw r2,(r3+0)
 738:	28 42 00 00 	lw r2,(r2+0)
 73c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 740:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 744:	34 01 00 08 	mvi r1,8
 748:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 74c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 750:	20 21 00 01 	andi r1,r1,0x1
 754:	44 20 ff fe 	be r1,r0,74c <_Z6msleepj+0x28>
}
 758:	c3 a0 00 00 	ret

0000075c <_Z6nsleepj>:
	timer0->compare1 = (FCPU/1000000)*nsec;
 75c:	78 03 00 00 	mvhi r3,0x0
 760:	38 63 0a b8 	ori r3,r3,0xab8
 764:	28 62 00 00 	lw r2,(r3+0)
 768:	08 21 00 32 	muli r1,r1,50
 76c:	28 42 00 00 	lw r2,(r2+0)
 770:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 774:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 778:	34 01 00 08 	mvi r1,8
 77c:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 780:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 784:	20 21 00 01 	andi r1,r1,0x1
 788:	44 20 ff fe 	be r1,r0,780 <_Z6nsleepj+0x24>
}
 78c:	c3 a0 00 00 	ret

00000790 <_Z8tic_initv>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 790:	78 02 00 00 	mvhi r2,0x0
 794:	38 42 0a bc 	ori r2,r2,0xabc
 798:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
 79c:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
 7a0:	34 02 13 88 	mvi r2,5000
 7a4:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
 7a8:	38 63 0a c0 	ori r3,r3,0xac0
	timer0->compare0 = (FCPU/10000);
 7ac:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
 7b0:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
 7b4:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
 7b8:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
 7bc:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 7c0:	34 02 00 0e 	mvi r2,14
 7c4:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
 7c8:	78 02 00 00 	mvhi r2,0x0
 7cc:	38 42 0a c4 	ori r2,r2,0xac4
 7d0:	38 63 0a c8 	ori r3,r3,0xac8
 7d4:	28 41 00 00 	lw r1,(r2+0)
 7d8:	28 62 00 00 	lw r2,(r3+0)
 7dc:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
 7e0:	c3 a0 00 00 	ret

000007e4 <_Z9uart_initv>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 7e4:	c3 a0 00 00 	ret

000007e8 <_Z12uart_getcharv>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 7e8:	78 02 00 00 	mvhi r2,0x0
 7ec:	38 42 0a cc 	ori r2,r2,0xacc
 7f0:	28 41 00 00 	lw r1,(r2+0)
 7f4:	28 22 00 00 	lw r2,(r1+0)
 7f8:	28 41 00 00 	lw r1,(r2+0)
 7fc:	20 21 00 01 	andi r1,r1,0x1
 800:	44 20 ff fe 	be r1,r0,7f8 <_Z12uart_getcharv+0x10>
	return uart0->rxtx;
 804:	28 41 00 04 	lw r1,(r2+4)
}
 808:	20 21 00 ff 	andi r1,r1,0xff
 80c:	c3 a0 00 00 	ret

00000810 <_Z12uart_putcharc>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 810:	78 03 00 00 	mvhi r3,0x0
 814:	38 63 0a d0 	ori r3,r3,0xad0
 818:	28 62 00 00 	lw r2,(r3+0)
{
 81c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 820:	28 43 00 00 	lw r3,(r2+0)
 824:	28 62 00 00 	lw r2,(r3+0)
 828:	20 42 00 10 	andi r2,r2,0x10
 82c:	5c 40 ff fe 	bne r2,r0,824 <_Z12uart_putcharc+0x14>
	uart0->rxtx = c;
 830:	58 61 00 04 	sw (r3+4),r1
}
 834:	c3 a0 00 00 	ret

00000838 <_Z11uart_putstrPc>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 838:	40 24 00 00 	lbu r4,(r1+0)
 83c:	44 80 00 0c 	be r4,r0,86c <_Z11uart_putstrPc+0x34>
	while (uart0->ucr & UART_BUSY) ;
 840:	78 03 00 00 	mvhi r3,0x0
 844:	38 63 0a d4 	ori r3,r3,0xad4
 848:	28 62 00 00 	lw r2,(r3+0)
 84c:	28 43 00 00 	lw r3,(r2+0)
 850:	28 62 00 00 	lw r2,(r3+0)
 854:	20 42 00 10 	andi r2,r2,0x10
 858:	5c 40 ff fe 	bne r2,r0,850 <_Z11uart_putstrPc+0x18>
	uart0->rxtx = c;
 85c:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 860:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 864:	40 24 00 00 	lbu r4,(r1+0)
 868:	5c 80 ff fa 	bne r4,r0,850 <_Z11uart_putstrPc+0x18>
	}
}
 86c:	c3 a0 00 00 	ret

00000870 <_Z8i2c_initv>:
 * I2C Functions
 */
void i2c_init()
{

	i2c0->prerl =0x00;
 870:	78 02 00 00 	mvhi r2,0x0
 874:	38 42 0a d8 	ori r2,r2,0xad8
 878:	28 41 00 00 	lw r1,(r2+0)
	i2c0->prerh =0x50;
 87c:	34 02 00 50 	mvi r2,80
	i2c0->prerl =0x00;
 880:	28 21 00 00 	lw r1,(r1+0)
 884:	30 20 00 00 	sb (r1+0),r0
	i2c0->prerh =0x50;
 888:	30 22 00 01 	sb (r1+1),r2
	i2c0->ctr =0x80;
 88c:	34 02 ff 80 	mvi r2,-128
 890:	30 22 00 02 	sb (r1+2),r2


}
 894:	c3 a0 00 00 	ret

00000898 <_Z9i2c_writeccc>:

void i2c_write(char addrDev, char addrReg, char dat)
{

   i2c0->TxRx=(addrDev<<1 +1);
 898:	78 05 00 00 	mvhi r5,0x0
 89c:	38 a5 0a dc 	ori r5,r5,0xadc
 8a0:	28 a4 00 00 	lw r4,(r5+0)
 8a4:	3c 21 00 02 	sli r1,r1,2
{
 8a8:	20 42 00 ff 	andi r2,r2,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 8ac:	28 84 00 00 	lw r4,(r4+0)
 8b0:	20 21 00 fc 	andi r1,r1,0xfc
{
 8b4:	20 63 00 ff 	andi r3,r3,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 8b8:	30 81 00 03 	sb (r4+3),r1
   i2c0->crsr =0x90;
 8bc:	34 01 ff 90 	mvi r1,-112
 8c0:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 8c4:	40 81 00 04 	lbu r1,(r4+4)
 8c8:	20 21 00 02 	andi r1,r1,0x2
 8cc:	5c 20 ff fe 	bne r1,r0,8c4 <_Z9i2c_writeccc+0x2c>
   i2c0->TxRx=addrReg;
 8d0:	30 82 00 03 	sb (r4+3),r2
   i2c0->crsr =0x10;
 8d4:	34 01 00 10 	mvi r1,16
 8d8:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 8dc:	40 81 00 04 	lbu r1,(r4+4)
 8e0:	20 21 00 02 	andi r1,r1,0x2
 8e4:	5c 20 ff fe 	bne r1,r0,8dc <_Z9i2c_writeccc+0x44>
   
   i2c0->TxRx=dat;
 8e8:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x10;
 8ec:	34 01 00 10 	mvi r1,16
 8f0:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 8f4:	40 81 00 04 	lbu r1,(r4+4)
 8f8:	20 21 00 02 	andi r1,r1,0x2
 8fc:	5c 20 ff fe 	bne r1,r0,8f4 <_Z9i2c_writeccc+0x5c>
//........... todo byte 70 9

   i2c0->TxRx=dat; // last byte
 900:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x50;
 904:	34 01 00 50 	mvi r1,80
 908:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 90c:	40 81 00 04 	lbu r1,(r4+4)
 910:	20 21 00 02 	andi r1,r1,0x2
 914:	5c 20 ff fe 	bne r1,r0,90c <_Z9i2c_writeccc+0x74>
//7

}
 918:	c3 a0 00 00 	ret

0000091c <_ZN3pwm7pwm_selEiib>:
#include "pwm.h"
#include "soc-hw.h"

void pwm::pwm_sel(int b, int c, bool en){
 91c:	37 9c ff e8 	addi sp,sp,-24
 920:	5b 8b 00 18 	sw (sp+24),r11
 924:	5b 8c 00 14 	sw (sp+20),r12
 928:	5b 8d 00 10 	sw (sp+16),r13
 92c:	5b 8e 00 0c 	sw (sp+12),r14
 930:	5b 8f 00 08 	sw (sp+8),r15
 934:	5b 9d 00 04 	sw (sp+4),ra
uint8_t Rd=0;
uint8_t Wr=1;
uint32_t dint=1000000;
uint32_t dind;

uint32_t e=b*12;
 938:	08 4b 00 0c 	muli r11,r2,12
//180 ->500us

if(c==1){
dind=35000;
}
if(c==2){
 93c:	34 01 00 02 	mvi r1,2
void pwm::pwm_sel(int b, int c, bool en){
 940:	20 8f 00 ff 	andi r15,r4,0xff
uint32_t d=e+8;
 944:	35 6d 00 08 	addi r13,r11,8
uint32_t t=e+4;
 948:	35 6e 00 04 	addi r14,r11,4
if(c==2){
 94c:	44 61 00 25 	be r3,r1,9e0 <_ZN3pwm7pwm_selEiib+0xc4>
dind=130000;
}
if(c==3){
 950:	34 01 00 03 	mvi r1,3
dind=240000;
 954:	38 0c a9 80 	mvu r12,0xa980
 958:	79 8c 00 03 	orhi r12,r12,0x3
if(c==3){
 95c:	5c 61 00 1a 	bne r3,r1,9c4 <_ZN3pwm7pwm_selEiib+0xa8>
e=e+48;
d=e+8;
t=e+4;
}

pwm_wr(Wr); pwm_rd(Rd);
 960:	34 01 00 01 	mvi r1,1
 964:	fb ff ff 1e 	calli 5dc <_Z6pwm_wrh>
 968:	34 01 00 00 	mvi r1,0
 96c:	fb ff ff 0f 	calli 5a8 <_Z6pwm_rdh>
pwm_addr(t); pwm_din(dint);
 970:	b9 c0 08 00 	mv r1,r14
 974:	fb ff ff 14 	calli 5c4 <_Z8pwm_addrj>
 978:	38 01 42 40 	mvu r1,0x4240
 97c:	78 21 00 0f 	orhi r1,r1,0xf
 980:	fb ff ff 1e 	calli 5f8 <_Z7pwm_dinj>

pwm_addr(d); pwm_din(dind);
 984:	b9 a0 08 00 	mv r1,r13
 988:	fb ff ff 0f 	calli 5c4 <_Z8pwm_addrj>
 98c:	b9 80 08 00 	mv r1,r12
 990:	fb ff ff 1a 	calli 5f8 <_Z7pwm_dinj>

pwm_addr(e); pwm_din(en);
 994:	b9 60 08 00 	mv r1,r11
 998:	fb ff ff 0b 	calli 5c4 <_Z8pwm_addrj>
 99c:	b9 e0 08 00 	mv r1,r15
 9a0:	fb ff ff 16 	calli 5f8 <_Z7pwm_dinj>


};
 9a4:	2b 9d 00 04 	lw ra,(sp+4)
 9a8:	2b 8b 00 18 	lw r11,(sp+24)
 9ac:	2b 8c 00 14 	lw r12,(sp+20)
 9b0:	2b 8d 00 10 	lw r13,(sp+16)
 9b4:	2b 8e 00 0c 	lw r14,(sp+12)
 9b8:	2b 8f 00 08 	lw r15,(sp+8)
 9bc:	37 9c 00 18 	addi sp,sp,24
 9c0:	c3 a0 00 00 	ret
if(c==4){
 9c4:	34 01 00 04 	mvi r1,4
 9c8:	5c 61 00 09 	bne r3,r1,9ec <_ZN3pwm7pwm_selEiib+0xd0>
d=e+8;
 9cc:	35 6d 00 38 	addi r13,r11,56
t=e+4;
 9d0:	35 6e 00 34 	addi r14,r11,52
dind=35000;
 9d4:	38 0c 88 b8 	mvu r12,0x88b8
e=e+48;
 9d8:	35 6b 00 30 	addi r11,r11,48
 9dc:	e3 ff ff e1 	bi 960 <_ZN3pwm7pwm_selEiib+0x44>
dind=130000;
 9e0:	38 0c fb d0 	mvu r12,0xfbd0
 9e4:	79 8c 00 01 	orhi r12,r12,0x1
 9e8:	e3 ff ff de 	bi 960 <_ZN3pwm7pwm_selEiib+0x44>
if(c==5){
 9ec:	34 01 00 05 	mvi r1,5
 9f0:	38 0c 88 b8 	mvu r12,0x88b8
 9f4:	5c 61 ff db 	bne r3,r1,960 <_ZN3pwm7pwm_selEiib+0x44>
d=e+8;
 9f8:	35 6d 00 38 	addi r13,r11,56
t=e+4;
 9fc:	35 6e 00 34 	addi r14,r11,52
dind=250000;
 a00:	38 0c d0 90 	mvu r12,0xd090
 a04:	79 8c 00 03 	orhi r12,r12,0x3
e=e+48;
 a08:	35 6b 00 30 	addi r11,r11,48
 a0c:	e3 ff ff d5 	bi 960 <_ZN3pwm7pwm_selEiib+0x44>

00000a10 <_ZN3pwm5brazoEi>:

int pwm::brazo(int d){
int m;
if(d==1){m=0;}
if(d==2){m=1;}
 a10:	34 03 00 02 	mvi r3,2
 a14:	34 01 00 01 	mvi r1,1
 a18:	44 43 00 04 	be r2,r3,a28 <_ZN3pwm5brazoEi+0x18>
if(d==3){m=2;}
 a1c:	34 03 00 03 	mvi r3,3
 a20:	34 01 00 02 	mvi r1,2
 a24:	5c 43 00 02 	bne r2,r3,a2c <_ZN3pwm5brazoEi+0x1c>
if(d==4){m=3;}
return m;
};
 a28:	c3 a0 00 00 	ret
if(d==4){m=3;}
 a2c:	34 03 00 04 	mvi r3,4
 a30:	34 01 00 00 	mvi r1,0
 a34:	5c 43 ff fd 	bne r2,r3,a28 <_ZN3pwm5brazoEi+0x18>
 a38:	34 01 00 03 	mvi r1,3
};
 a3c:	c3 a0 00 00 	ret

00000a40 <_ZN5timer6nsleepEi>:
void timer::nsleep(int nsec)
{
	int tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 a40:	78 03 00 00 	mvhi r3,0x0
 a44:	38 63 0a e0 	ori r3,r3,0xae0
 a48:	28 61 00 00 	lw r1,(r3+0)
 a4c:	08 42 00 32 	muli r2,r2,50
 a50:	28 23 00 00 	lw r3,(r1+0)
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 a54:	34 01 00 08 	mvi r1,8
	timer0->compare1 = (FCPU/1000000)*nsec;
 a58:	58 62 00 10 	sw (r3+16),r2
	timer0->counter1 = 0;
 a5c:	58 60 00 14 	sw (r3+20),r0
	timer0->tcr1 = TIMER_EN;
 a60:	58 61 00 0c 	sw (r3+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 a64:	28 61 00 0c 	lw r1,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 a68:	20 21 00 01 	andi r1,r1,0x1
 a6c:	44 20 ff fe 	be r1,r0,a64 <_ZN5timer6nsleepEi+0x24>
};
 a70:	c3 a0 00 00 	ret
